// <auto-generated />
using System;
using Ingweland.Fog.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ingweland.Fog.Infrastructure.Migrations
{
    [DbContext(typeof(FogDbContext))]
    [Migration("20250219012133_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.Player", b =>
                {
                    b.Property<string>("WorldId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<int>("InGamePlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AllianceName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RankingPoints")
                        .HasColumnType("int");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date");

                    b.HasKey("WorldId", "InGamePlayerId");

                    b.HasIndex("Age");

                    b.HasIndex("InGamePlayerId");

                    b.HasIndex("Name");

                    b.HasIndex("RankingPoints")
                        .IsDescending();

                    b.HasIndex("WorldId");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerRanking", b =>
                {
                    b.Property<string>("WorldId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<int>("InGamePlayerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CollectedAt")
                        .HasColumnType("date");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AllianceName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("WorldId", "InGamePlayerId", "CollectedAt");

                    b.HasIndex("CollectedAt")
                        .IsDescending();

                    b.HasIndex("WorldId");

                    b.HasIndex("WorldId", "InGamePlayerId");

                    b.ToTable("player_rankings", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerRanking", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", null)
                        .WithMany("Rankings")
                        .HasForeignKey("WorldId", "InGamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.Player", b =>
                {
                    b.Navigation("Rankings");
                });
#pragma warning restore 612, 618
        }
    }
}
