// <auto-generated />
using System;
using Ingweland.Fog.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ingweland.Fog.Infrastructure.Migrations
{
    [DbContext(typeof(FogDbContext))]
    [Migration("20250908093933_BattleSquadsEntity")]
    partial class BattleSquadsEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlliancePlayer", b =>
                {
                    b.Property<int>("AllianceHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemberHistoryId")
                        .HasColumnType("int");

                    b.HasKey("AllianceHistoryId", "MemberHistoryId");

                    b.HasIndex("MemberHistoryId");

                    b.ToTable("AlliancePlayer");
                });

            modelBuilder.Entity("BattleSummaryEntityBattleUnitEntity", b =>
                {
                    b.Property<int>("BattlesId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.HasKey("BattlesId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("battles_to_units", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.Alliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvatarBackgroundId")
                        .HasColumnType("int");

                    b.Property<int>("AvatarIconId")
                        .HasColumnType("int");

                    b.Property<int>("InGameAllianceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MembersUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RankingPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Active");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("WorldId")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("InGameAllianceId");

                    b.HasIndex("MembersUpdatedAt")
                        .IsDescending();

                    b.HasIndex("Name");

                    b.HasIndex("RankingPoints")
                        .IsDescending();

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedAt")
                        .IsDescending();

                    b.HasIndex("WorldId");

                    b.HasIndex("WorldId", "InGameAllianceId")
                        .IsUnique();

                    b.ToTable("alliances", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.AllianceMemberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("alliance_members", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.AllianceNameHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("AllianceId", "Name", "ChangedAt")
                        .IsUnique();

                    b.ToTable("alliance_name_history_entries", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.AllianceRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CollectedAt")
                        .HasColumnType("date");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllianceId");

                    b.HasIndex("CollectedAt")
                        .IsDescending();

                    b.ToTable("alliance_rankings", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleSquadStatsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("HeroId")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("SupportUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BattleStatsId");

                    b.HasIndex("HeroId");

                    b.HasIndex("SupportUnitId");

                    b.ToTable("battle_squad_stats", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleSquadsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<string>("Squads")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.HasIndex("Side");

                    b.ToTable("battle_squads", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleStatsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("InGameBattleId")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.HasKey("Id");

                    b.HasIndex("InGameBattleId")
                        .IsUnique();

                    b.ToTable("battle_stats", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleSummaryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BattleDefinitionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BattleType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Undefined");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("EnemySquads")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("InGameBattleId")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.Property<DateOnly>("PerformedAt")
                        .HasColumnType("date");

                    b.Property<string>("PlayerSquads")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorldId")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("BattleDefinitionId");

                    b.HasIndex("BattleType");

                    b.HasIndex("Difficulty");

                    b.HasIndex("InGameBattleId");

                    b.HasIndex("PerformedAt")
                        .IsDescending();

                    b.HasIndex("ResultStatus");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("WorldId");

                    b.HasIndex("WorldId", "InGameBattleId")
                        .IsUnique();

                    b.ToTable("battles", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleTimelineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Entries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("InGameBattleId")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.HasKey("Id");

                    b.HasIndex("InGameBattleId");

                    b.ToTable("battle_timelines", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleUnitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("Side");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitId", "Level", "Side")
                        .IsUnique();

                    b.ToTable("battle_units", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AvatarId")
                        .HasColumnType("int");

                    b.Property<int>("InGamePlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSeenOnline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("ProfileUpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("PvpTier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("RankingPoints")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("Active");

                    b.Property<int?>("TreasureHuntDifficulty")
                        .HasColumnType("int");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("WorldId")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("Age");

                    b.HasIndex("InGamePlayerId");

                    b.HasIndex("Name");

                    b.HasIndex("ProfileUpdatedAt")
                        .IsDescending();

                    b.HasIndex("RankingPoints")
                        .IsDescending();

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedAt")
                        .IsDescending();

                    b.HasIndex("WorldId");

                    b.HasIndex("WorldId", "InGamePlayerId")
                        .IsUnique();

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerAgeHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "Age", "ChangedAt")
                        .IsUnique();

                    b.ToTable("player_age_history_entries", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerCitySnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CollectedAt")
                        .HasColumnType("date");

                    b.Property<byte[]>("CompressedData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Food")
                        .HasColumnType("int");

                    b.Property<int>("Goods")
                        .HasColumnType("int");

                    b.Property<float>("HappinessUsageRatio")
                        .HasColumnType("real");

                    b.Property<bool>("HasPremiumBuildings")
                        .HasColumnType("bit");

                    b.Property<string>("OpenedExpansionsHash")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("char(16)")
                        .IsFixedLength();

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TotalArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeId");

                    b.HasIndex("CityId");

                    b.HasIndex("Coins")
                        .IsDescending();

                    b.HasIndex("Food")
                        .IsDescending();

                    b.HasIndex("Goods")
                        .IsDescending();

                    b.HasIndex("HasPremiumBuildings");

                    b.HasIndex("OpenedExpansionsHash");

                    b.HasIndex("TotalArea");

                    b.HasIndex("PlayerId", "CityId", "CollectedAt")
                        .IsUnique();

                    b.ToTable("player_city_snapshots", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerNameHistoryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PlayerId", "Name");

                    b.ToTable("player_name_history_entries", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CollectedAt")
                        .HasColumnType("date");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectedAt")
                        .IsDescending();

                    b.HasIndex("PlayerId");

                    b.ToTable("player_rankings", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.ProfileSquadEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityLevel")
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AscensionLevel")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CollectedAt")
                        .HasColumnType("date");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("SerializedHero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerializedSupportUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AbilityLevel");

                    b.HasIndex("Age");

                    b.HasIndex("AscensionLevel");

                    b.HasIndex("CollectedAt")
                        .IsDescending();

                    b.HasIndex("Level");

                    b.HasIndex("UnitId");

                    b.HasIndex("PlayerId", "UnitId", "CollectedAt")
                        .IsUnique();

                    b.ToTable("profile_squads", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PvpBattle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("InGameBattleId")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.Property<int>("LoserId")
                        .HasColumnType("int");

                    b.Property<string>("LoserUnits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.Property<string>("WinnerUnits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorldId")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("InGameBattleId");

                    b.HasIndex("LoserId");

                    b.HasIndex("PerformedAt")
                        .IsDescending();

                    b.HasIndex("WinnerId");

                    b.HasIndex("WorldId");

                    b.HasIndex("WorldId", "InGameBattleId")
                        .IsUnique();

                    b.ToTable("pvp_battles", null, t =>
                        {
                            t.HasCheckConstraint("CK_pvp_battles_WinnerId_LoserId_Different", "[WinnerId] <> [LoserId]");
                        });
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PvpRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectedAt")
                        .IsDescending();

                    b.HasIndex("PlayerId");

                    b.ToTable("pvp_rankings", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.TopHeroInsightsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int?>("FromLevel")
                        .HasColumnType("int");

                    b.Property<string>("Heroes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ToLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FromLevel");

                    b.HasIndex("Mode");

                    b.HasIndex("ToLevel");

                    b.ToTable("top_hero_insights", (string)null);
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.UnitBattleStatsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Attack")
                        .HasColumnType("real");

                    b.Property<float>("Defense")
                        .HasColumnType("real");

                    b.Property<float>("Heal")
                        .HasColumnType("real");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("unit_battle_stats", (string)null);
                });

            modelBuilder.Entity("AlliancePlayer", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Alliance", null)
                        .WithMany()
                        .HasForeignKey("AllianceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("MemberHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleSummaryEntityBattleUnitEntity", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.BattleSummaryEntity", null)
                        .WithMany()
                        .HasForeignKey("BattlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.BattleUnitEntity", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.AllianceMemberEntity", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Alliance", "Alliance")
                        .WithMany("Members")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", "Player")
                        .WithOne("AllianceMembership")
                        .HasForeignKey("Ingweland.Fog.Models.Fog.Entities.AllianceMemberEntity", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.AllianceNameHistoryEntry", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Alliance", null)
                        .WithMany("NameHistory")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.AllianceRanking", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Alliance", null)
                        .WithMany("Rankings")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleSquadStatsEntity", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.BattleStatsEntity", null)
                        .WithMany("Squads")
                        .HasForeignKey("BattleStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.UnitBattleStatsEntity", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId");

                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.UnitBattleStatsEntity", "SupportUnit")
                        .WithMany()
                        .HasForeignKey("SupportUnitId");

                    b.Navigation("Hero");

                    b.Navigation("SupportUnit");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleSquadsEntity", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.BattleSummaryEntity", null)
                        .WithMany("Squads")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerAgeHistoryEntry", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", null)
                        .WithMany("AgeHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerCitySnapshot", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", "Player")
                        .WithMany("CitySnapshots")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerNameHistoryEntry", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", null)
                        .WithMany("NameHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PlayerRanking", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", null)
                        .WithMany("Rankings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.ProfileSquadEntity", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", "Player")
                        .WithMany("Squads")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PvpBattle", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", "Loser")
                        .WithMany("PvpLosses")
                        .HasForeignKey("LoserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", "Winner")
                        .WithMany("PvpWins")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Loser");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.PvpRanking", b =>
                {
                    b.HasOne("Ingweland.Fog.Models.Fog.Entities.Player", null)
                        .WithMany("PvpRankings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.Alliance", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("NameHistory");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleStatsEntity", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.BattleSummaryEntity", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("Ingweland.Fog.Models.Fog.Entities.Player", b =>
                {
                    b.Navigation("AgeHistory");

                    b.Navigation("AllianceMembership");

                    b.Navigation("CitySnapshots");

                    b.Navigation("NameHistory");

                    b.Navigation("PvpLosses");

                    b.Navigation("PvpRankings");

                    b.Navigation("PvpWins");

                    b.Navigation("Rankings");

                    b.Navigation("Squads");
                });
#pragma warning restore 612, 618
        }
    }
}
