@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@implements IBrowserViewportObserver
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Models
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.WebApp.Client.Models
@using Ingweland.Fog.WebApp.Client.Services.Abstractions
@using Microsoft.Extensions.Localization
@using MudBlazor.Services
@implements IAsyncDisposable
@inject IAssetUrlProvider AssetUrlProvider
@inject IJSInteropService JsInteropService
@inject IStringLocalizer<FogResource> Loc
@inject IPageSetupService PageSetupService
<MudPopoverProvider/>
<MudDialogProvider/>
<MudAppBar ToolBarClass="user-select-none" Fixed="@(_currentWidth > 575)" Class="command-center-app-bar"
           Color="Color.Primary" Dense="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                   OnClick="@((e) => DrawerToggle())"/>
    <span class="title" @onclick="NavigateToMain">@_pageMetadata.Title</span>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Outlined.VolunteerActivism"
                   Color="Color.Inherit"
                   OnClick="@(() => OpenPage(FogUrlBuilder.PageRoutes.SUPPORT_US_PATH))"/>
    <MudIconButton Icon="@Icons.Material.Outlined.Help"
                   Color="Color.Inherit" Edge="Edge.End"
                   OnClick="@(() => OpenPage(FogUrlBuilder.PageRoutes.HELP_COMMAND_CENTER_PATH))"/>
</MudAppBar>
<MudDrawer Fixed="true" Class="mud-drawer-fixed" Color="Color.Primary" Variant="DrawerVariant.Temporary"
           @bind-Open="@_drawerOpen">
    <div class="menu-header">
        @if (_pageIcon != null)
        {
            <img class=" command-center-card-icon" src="@_pageIcon"/>
        }
        <span>@_pageMetadata.Title</span>
    </div>

    <MudNavMenu>
        @if (_currentSectionMenuItems != null)
        {
            <NavMenuSection MenuItems="_currentSectionMenuItems"/>
            <div style="height: 32px"></div>
        }
        <NavMenuSection MenuItems="_mainMenuItems"/>
    </MudNavMenu>
</MudDrawer>

@code {
    private PageMetadata _pageMetadata = null!;
    private IReadOnlyCollection<NavMenuItem>? _currentSectionMenuItems;
    private IReadOnlyCollection<NavMenuItem> _mainMenuItems = null!;
    private string? _pageIcon;

    protected override void OnInitialized()
    {
        Setup();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void Setup()
    {
        _pageMetadata = PageSetupService.GetMetadata();
        _mainMenuItems = PageSetupService.GetMainMenuItems();
        _currentSectionMenuItems = PageSetupService.GetCurrentSectionMenuItems();
        _pageIcon = PageSetupService.GetPageIcon();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Setup();
    }

    private void NavigateToMain()
    {
        NavigationManager.NavigateTo(PageSetupService.GetCurrentHomePath());
    }

    private async Task OpenPage(string path)
    {
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }

        await JsInteropService.OpenUrlAsync(path, "_blank");
    }

    private bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    private int _currentWidth;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        NotifyOnBreakpointOnly = true,
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _currentWidth = browserViewportEventArgs.BrowserWindowSize.Width;

        return InvokeAsync(StateHasChanged);
    }

}