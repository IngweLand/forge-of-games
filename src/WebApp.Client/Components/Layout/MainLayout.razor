@implements IDisposable
@using Ingweland.Fog.Application.Client.Web.Models
@using Ingweland.Fog.Application.Client.Web.Services.Abstractions
@using Ingweland.Fog.WebApp.Client.Constants
@using Ingweland.Fog.WebApp.Client.Services.Abstractions
@using Ingweland.Fog.WebApp.Client.Theme
@inherits LayoutComponentBase
@inject IPageMetadataService PageMetadataService
@inject IPersistenceService PersistenceService
<HeadContent>
    <meta name="description" content="@_pageMetadata.Description">
    <meta name="keywords" content="@_pageMetadata.Keywords">
</HeadContent>
<PageTitle>@_pageMetadata.PageTitle</PageTitle>
<MudThemeProvider Theme="FogTheme.Theme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<PageLoadingIndicator/>
<MudLayout Class="d-flex flex-column" Style="min-height: 100dvh">
    <NavBar/>
    <MudMainContent Class="main-layout-main-content">
        <ErrorBoundary>
            @if (_shouldShowAnnouncement)
            {
                <GlobalAnnouncementComponent PersistenceKey="@PersistenceKeys.PATREON_ANNOUNCEMENT_CONSUMED"
                                             OnAnnouncementConsumed="@(() => _shouldShowAnnouncement = false)"/>
            }
            @Body
        </ErrorBoundary>
    </MudMainContent>
</MudLayout>

@code
{
    private PageMetadata _pageMetadata = null!;
    private bool _shouldShowAnnouncement;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        _pageMetadata = PageMetadataService.GetForCurrentPage();

        if (RendererInfo.IsInteractive)
        {
            NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            var show = !await PersistenceService
                .GetItemAsync<bool>(PersistenceKeys.PATREON_ANNOUNCEMENT_CONSUMED);
            if (_shouldShowAnnouncement != show)
            {
                _shouldShowAnnouncement = show;
                StateHasChanged();
            }
        }
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _pageMetadata = PageMetadataService.GetForCurrentPage();
        StateHasChanged();
    }

    public void Dispose()
    {
        if (NavigationManager != null)
        {
            NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
        }
    }
}
