@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager
@implements IBrowserViewportObserver
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Models
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.WebApp.Client.Models
@using Ingweland.Fog.WebApp.Client.Services.Abstractions
@using Microsoft.Extensions.Localization
@using MudBlazor.Services
@implements IAsyncDisposable
@inject IAssetUrlProvider AssetUrlProvider
@inject IJSInteropService JsInteropService
@inject IStringLocalizer<FogResource> Loc
@inject IMainMenuService MainMenuService
@inject IPageMetadataService PageMetadataService

<MudAppBar ToolBarClass="user-select-none" Fixed="false" Class="command-center-app-bar" Elevation="0"
           Color="Color.Primary" Dense="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                   OnClick="@(e => DrawerToggle())"/>
    <span class="nav-bar-title" @onclick="NavigateToCurrentHome">@_pageMetadata.Title</span>
    <MudSpacer/>
    <MudTooltip Text="@Loc[FogResource.Navigation_SupportUs]">
        <MudIconButton Icon="@Icons.Material.Outlined.VolunteerActivism"
                       Color="Color.Inherit"
                       OnClick="@(() => NavigationManager.NavigateTo(FogUrlBuilder.PageRoutes.SUPPORT_US_PATH))"/>
    </MudTooltip>
    @if (_currentWidth > 575)
    {
        <MudTooltip Text="GitHub">
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                           Color="Color.Inherit"
                           OnClick="@(() => OpenPage(FogUrlBuilder.PageRoutes.FOG_GITHUB_URL))"/>
        </MudTooltip>
        <MudTooltip Text="Discord">
            <MudIconButton Icon="@Icons.Custom.Brands.Discord"
                           Color="Color.Inherit"
                           OnClick="@(() => OpenPage(FogUrlBuilder.PageRoutes.FOG_DISCORD_URL))"/>

        </MudTooltip>
        <MudTooltip Text="@Loc[FogResource.Common_Help]">
            <MudIconButton Icon="@Icons.Material.Outlined.Help"
                           Color="Color.Inherit" Edge="Edge.End"
                           OnClick="@(() => NavigationManager.NavigateTo(_pageMetadata.HelpPagePath))"/>
        </MudTooltip>
    }
    else
    {
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
            <MudMenuItem Icon="@Icons.Custom.Brands.GitHub"
                         Color="Color.Inherit"
                         OnClick="@(() => OpenPage(FogUrlBuilder.PageRoutes.FOG_GITHUB_URL))">GitHub
            </MudMenuItem>
            <MudMenuItem Icon="@Icons.Custom.Brands.Discord"
                         Color="Color.Inherit"
                         OnClick="@(() => OpenPage(FogUrlBuilder.PageRoutes.FOG_DISCORD_URL))">Discord
            </MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Outlined.Help"
                         Color="Color.Inherit" Edge="Edge.End"
                         OnClick="@(() => NavigationManager.NavigateTo(_pageMetadata.HelpPagePath))">
                @Loc[FogResource.Common_Help]
            </MudMenuItem>
        </MudMenu>
    }

</MudAppBar>
<MudDrawer Fixed="true" Class="mud-drawer-fixed" Color="Color.Primary" Variant="DrawerVariant.Temporary"
           @bind-Open="@_drawerOpen">
    <div class="menu-header">
        <span>@Loc[FogResource.BrandName]</span>
        @if (_pageMetadata.Icon != null)
        {
            <img class=" command-center-card-icon" src="@_pageMetadata.Icon"/>
        }
    </div>

    <MudNavMenu>
        <NavMenuSection MenuItems="_mainMenuItems"/>
    </MudNavMenu>
    <MudSpacer/>
    <div class="menu-footer">
        <LanguageSelectorComponent/>
        <div class="copyright">
            <span>Â© @(DateTime.Now.ToString("yyyy")) Forge of Games</span>
            <span>@Loc[FogResource.Common_AllRightsReserved]</span>
        </div>
    </div>
</MudDrawer>

@code {
    private PageMetadata _pageMetadata = null!;
    private IReadOnlyCollection<NavMenuItem> _mainMenuItems = null!;

    protected override void OnInitialized()
    {
        Setup();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void Setup()
    {
        _pageMetadata = PageMetadataService.GetForCurrentPage();
        _mainMenuItems = MainMenuService.GetMainMenuItems();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Setup();
        StateHasChanged();
    }

    private void NavigateToCurrentHome()
    {
        if (NavigationManager.Uri == NavigationManager.ToAbsoluteUri(_pageMetadata.CurrentHomePath).AbsoluteUri)
        {
            return;
        }

        NavigationManager.NavigateTo(_pageMetadata.CurrentHomePath);
    }

    private async Task OpenPage(string path)
    {
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }

        await JsInteropService.OpenUrlAsync(path, "_blank");
    }

    private bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    private int _currentWidth;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        NotifyOnBreakpointOnly = false,
        ReportRate = 200,
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _currentWidth = browserViewportEventArgs.BrowserWindowSize.Width;

        return InvokeAsync(StateHasChanged);
    }

}