@page "/tools/hero-progression-calculator"
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Units
@using Ingweland.Fog.WebApp.Client.Components.Elements
@using Microsoft.Extensions.Localization
@rendermode InteractiveWebAssembly
@inject IUnitUiService UnitUiService
@inject IStringLocalizer<FogResource> Loc
@inject IToolsUiService ToolsUiService
<HeadContent>
    <meta name="description"
          content="Calculate resources required to level up a hero - the tool for Heroes of History">
    <meta name="keywords"
          content="Heroes of History tools, hero progression calculator, hoh tools, hoh calculator, heroes, hero leveling, hero resources, hero cost">
</HeadContent>
<PageTitle>Hero progression calculator for Heroes of History on Forge of Games</PageTitle>
<div class="component-root vertical-layout">
    <div class="vertical-layout text-container">
        <div class="tool-title">@Loc[FogResource.Tools_HeroProgressionResourcesCalculator_Name]</div>
        <div>@Loc[FogResource.Tools_HeroProgressionResourcesCalculator_Description]</div>
    </div>
    <div class="fog-container vertical-layout tool-container">
        @if (_heroes == null)
        {
            <div class="d-flex justify-content-center align-items-center vh-100">
                <div class="spinner-grow" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <HeroSelectorComponent Heroes="@_heroes" HeroChanged="OnHeroChanged"/>

            @if (_hero != null)
            {
                <MudSelect Label="@Loc[FogResource.Tools_CurrentLevel]" T="HeroLevelViewModel"
                           ValueChanged="OnCurrentLevelChanged" Value="@_currentLevel"
                           Variant="Variant.Outlined">

                    @foreach (var level in _hero.Levels)
                    {
                        <MudSelectItem Value="level">@level.Title</MudSelectItem>
                    }
                </MudSelect>
            }
            
            @if (_targetLevels != null)
            {
                <MudSelect Label="@Loc[FogResource.Tools_TargetLevel]" T="HeroLevelViewModel"
                           ValueChanged="OnTargetLevelChanged" Value="@_targetLevel"
                           Variant="Variant.Outlined">

                    @foreach (var level in _targetLevels)
                    {
                        <MudSelectItem Value="level">@level.Title</MudSelectItem>
                    }
                </MudSelect>
            }

            @if (_costs != null)
            {
                <div class="cost-items-container">
                    @foreach (var cost in _costs)
                    {
                        <HorizontalIconLabelComponent Item="cost"/>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private IReadOnlyCollection<HeroBasicViewModel>? _heroes;
    private HeroViewModel? _hero;
    private IList<HeroLevelViewModel>? _targetLevels;
    private HeroLevelViewModel? _currentLevel;
    private HeroLevelViewModel? _targetLevel;
    private IReadOnlyCollection<IconLabelItemViewModel>? _costs;

    protected override async Task OnInitializedAsync()
    {
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }

        _heroes = await UnitUiService.GetHeroListAsync();
    }

    private async Task OnHeroChanged(HeroBasicViewModel selectedHero)
    {
        _targetLevel = null;
        _targetLevels = null;
        _currentLevel = null;
        _costs = null;
        _hero = null;
        var hero = await UnitUiService.GetHeroAsync(selectedHero.Id);
        if (hero == null)
        {
            return;
        }

        _hero = hero;
        StateHasChanged();
    }

    private void OnCurrentLevelChanged(HeroLevelViewModel lvl)
    {
        _targetLevels = null;
        _targetLevel = null;
        _costs = null;
        _currentLevel = lvl;

        var i = 0;
        foreach (var level in _hero!.Levels)
        {
            i++;
            if (level != _currentLevel)
            {
                continue;
            }

            _targetLevels = _hero.Levels.Skip(i).Take(9999).ToList();
            break;
        }
        
        StateHasChanged();
    }

    private void OnTargetLevelChanged(HeroLevelViewModel lvl)
    {
        _targetLevel = lvl;
        _costs = ToolsUiService.CalculateHeroProgressionCost(_hero!.Data, _currentLevel!.LevelSpecs, _targetLevel!.LevelSpecs);
        StateHasChanged();
    }

}