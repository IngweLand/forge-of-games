@attribute [Route(FogUrlBuilder.PageRoutes.PLAYER_PROFILE_TEMPLATE)]
@using System.Globalization
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.WebApp.Client.Components.Elements.StatsHub
@using Size = MudBlazor.Size
@using ValueType = Syncfusion.Blazor.Charts.ValueType
@inherits StatsHubPageBase
@if (IsInitialized && _player != null)
{
    <div class="page-container">
        <PlayerInfoComponent Player="@_player.Player" OnAllianceClicked="OnPlayerInfoAllianceClicked"/>
        <div class="fog-container section-container actions-container">
            <div>
                <MudDatePicker Label="@Loc[FogResource.StatsHub_Player_CitySnapshotDate]" @bind-Date="_citySnapshotDate"
                               Culture="@CultureInfo.CurrentUICulture" ShowToolbar="false"
                               MinDate="@(new DateTime(2025, 7, 1))" Disabled="@_fetchingCity"
                               IsDateDisabledFunc="@((DateTime dt) => !_player.CitySnapshotDays.Contains(dt))"/>
            </div>
            <MudButton OnClick="@VisitCity" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_fetchingCity"
                       EndIcon="@Icons.Material.Filled.FlightTakeoff" IconColor="Color.Inherit">
                @if (_fetchingCity)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">@Loc[FogResource.StatsHub_Player_Visit]</MudText>
                }
                else
                {
                    <MudText>@Loc[FogResource.StatsHub_Player_Visit]</MudText>
                }
            </MudButton>
            <MudButton OnClick="@ShowCityStats" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_fetchingCity"
                       EndIcon="@Icons.Material.Filled.Analytics" IconColor="Color.Inherit">
                @if (_fetchingCity)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">@Loc[FogResource.StatsHub_Player_ViewCityStats]</MudText>
                }
                else
                {
                    <MudText>@Loc[FogResource.StatsHub_Player_ViewCityStats]</MudText>
                }
            </MudButton>
            @if (_player.HasPvpBattles)
            {
                <MudButton OnClick="@NavigateToBattlesScreen" Variant="Variant.Filled" Color="Color.Primary"
                           Disabled="@_fetchingCity">@Loc[FogResource.StatsHub_Player_PvpBattles]</MudButton>
            }
        </div>
        @if (_player.TreasureHuntDifficulty != null)
        {
            <div class="fog-container section-container" style="align-items: flex-start;">
                <TreasureHuntDifficultyComponent MaxPoints="@_player.TreasureHuntMaxPoints"
                                                 Difficulty="@_player.TreasureHuntDifficulty"/>
            </div>
        }

        @if (_player.Squads.Count > 0)
        {
            <div class="fog-container section-container">
                <span class="section-title">@Loc[FogResource.StatsHub_Player_TopHeroes]</span>
                <div class="top-heroes-container">
                    @foreach (var squad in _player.Squads)
                    {
                        <ProfileSquadComponent HeroProfile="@squad" HasShadow="true"
                                               OnClick="@OnProfileSquadClicked"></ProfileSquadComponent>
                    }
                </div>
            </div>
        }

        @if (_canShowChart)
        {
            <div class="fog-container section-container ranking-points-chart-container">
                <div class="section-title expandable-section-title"
                     @onclick="ToggleRankingChart">
                    <span>@Loc[FogResource.StatsHub_Player_RankingPoints]</span>
                    @if (_rankingChartIsExpanded)
                    {
                        <span class="material-symbols-outlined">collapse_all</span>
                    }
                    else
                    {
                        <span class="material-symbols-outlined">expand_all</span>
                    }
                </div>

                @if (_rankingChartIsExpanded)
                {
                    <SfChart Focusable="false" Height="300">
                        <ChartArea>
                            <ChartAreaBorder Width="0"/>
                        </ChartArea>
                        <ChartMargin Top="12"/>
                        <ChartPrimaryXAxis IntervalType="IntervalType.Days" Format="dd/MM"
                                           ValueType="ValueType.DateTime">
                            <ChartAxisMajorGridLines Color="var(--fog-border-color)" Width="1"/>
                            <ChartAxisLabelStyle FontFamily="var(--main-font-family)"
                                                 Color="var(--fog-text-color)"/>
                            <ChartAxisMajorTickLines Color="var(--fog-border-color)"/>
                            <ChartAxisLineStyle Color="var(--fog-border-color)" Width="2"/>
                        </ChartPrimaryXAxis>
                        <ChartPrimaryYAxis RangePadding="ChartRangePadding.Round">
                            <ChartAxisMajorGridLines Color="var(--fog-border-color)" Width="1"/>
                            <ChartAxisLabelStyle FontFamily="var(--main-font-family)"
                                                 Color="var(--fog-text-color)"/>
                            <ChartAxisMajorTickLines Color="var(--fog-border-color)"/>
                            <ChartAxisLineStyle Color="var(--fog-border-color)" Width="2"/>
                        </ChartPrimaryYAxis>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@_player.RankingPoints" XName="Date" YName="Value"
                                         Type="ChartSeriesType.Line" Fill="var(--fog-chart-line-color)">
                                <ChartEmptyPointSettings Mode="EmptyPointMode.Drop"/>
                                <ChartSeriesAnimation Enable="false"/>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                }
            </div>

            @if (_player.PvpRankingPoints.Count > 0)
            {
                <div class="fog-container section-container ranking-points-chart-container">
                    <div class="section-title expandable-section-title"
                         @onclick="TogglePvpChart">
                        <span>@Loc[FogResource.StatsHub_Player_PvpRankingPoints]</span>
                        @if (_pvpChartIsExpanded)
                        {
                            <span class="material-symbols-outlined">collapse_all</span>
                        }
                        else
                        {
                            <span class="material-symbols-outlined">expand_all</span>
                        }
                    </div>

                    @if (_pvpChartIsExpanded)
                    {
                        <SfChart Focusable="false" Height="300">
                            <ChartArea>
                                <ChartAreaBorder Width="0"/>
                            </ChartArea>
                            <ChartMargin Top="12"/>
                            <ChartPrimaryXAxis IntervalType="IntervalType.Hours" Format="dd/MM"
                                               ValueType="ValueType.DateTime">
                                <ChartAxisMajorGridLines Color="var(--fog-border-color)" Width="1"/>
                                <ChartAxisLabelStyle FontFamily="var(--main-font-family)"
                                                     Color="var(--fog-text-color)"/>
                                <ChartAxisMajorTickLines Color="var(--fog-border-color)"/>
                                <ChartAxisLineStyle Color="var(--fog-border-color)" Width="2"/>
                            </ChartPrimaryXAxis>
                            <ChartPrimaryYAxis RangePadding="ChartRangePadding.Round">
                                <ChartAxisMajorGridLines Color="var(--fog-border-color)" Width="1"/>
                                <ChartAxisLabelStyle FontFamily="var(--main-font-family)"
                                                     Color="var(--fog-text-color)"/>
                                <ChartAxisMajorTickLines Color="var(--fog-border-color)"/>
                                <ChartAxisLineStyle Color="var(--fog-border-color)" Width="2"/>
                            </ChartPrimaryYAxis>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@_player.PvpRankingPoints" XName="Date" YName="Value"
                                             Type="ChartSeriesType.Line" Fill="var(--fog-chart-line-color)">
                                    <ChartEmptyPointSettings Mode="EmptyPointMode.Drop"/>
                                    <ChartSeriesAnimation Enable="false"/>
                                </ChartSeries>
                            </ChartSeriesCollection>
                        </SfChart>
                    }
                </div>
            }
        }

        @if (_player.CurrentAlliance != null || _player.PreviousAlliances.Count > 0)
        {
            <div class="fog-container section-container">
                <span class="section-title">@Loc[FogResource.StatsHub_Player_Alliances]</span>
                <div class="alliances-container">
                    @if (_player.CurrentAlliance != null)
                    {
                        <a href="@FogUrlBuilder.PageRoutes.Alliance(_player.CurrentAlliance.Id)"
                           class="anchor-inherited-style"
                           @onclick="() => OnAllianceClicked(_player.CurrentAlliance.Id)">
                            <AllianceListItemComponent Alliance="@_player.CurrentAlliance"/>
                        </a>
                    }
                    @if (_player.CurrentAlliance != null && _player.PreviousAlliances.Count > 0)
                    {
                        <div class="alliance-list-spacer"></div>
                    }
                    @foreach (var alliance in _player.PreviousAlliances)
                    {
                        <a href="@FogUrlBuilder.PageRoutes.Alliance(alliance.Id)" class="anchor-inherited-style"
                           @onclick="() => OnAllianceClicked(alliance.Id)">
                            <AllianceListItemComponent Alliance="@alliance"/>
                        </a>
                    }
                </div>
            </div>
        }

        <div class="fog-container section-container">
            <span class="section-title">@Loc[FogResource.Common_Ages]</span>
            <MudTimeline TimelinePosition="TimelinePosition.Start">
                @foreach (var age in _player.Ages)
                {
                    <MudTimelineItem Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">
                        <ItemContent>
                            <p class="preserve-whitespace">@age.Value</p>
                            <p class="timeline-date">@age.Date.ToString("d")</p>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        </div>

        @if (_player.Names != null)
        {
            <div class="fog-container section-container">
                <span class="section-title">@Loc[FogResource.StatsHub_Player_Names]</span>
                <div>
                    <span>@(string.Join(", ", _player.Names))</span>
                </div>
            </div>
        }


    </div>
}
else
{
    <LoadingIndicator/>
}

@code {

    [Parameter]
    public required int PlayerId { get; set; }

}
