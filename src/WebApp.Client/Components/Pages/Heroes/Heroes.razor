@attribute [Route(FogUrlBuilder.PageRoutes.BASE_HEROES_PATH)]
@using Ingweland.Fog.Application.Client.Web.Models
@using Ingweland.Fog.Application.Client.Web.Services.Abstractions
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Units
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.WebApp.Client.Components.Elements.Heroes
@using Ingweland.Fog.WebApp.Client.Constants
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
@inject IHeroProfileUiService HeroProfileUiService
@inject IPersistenceService PersistenceService
@if (_heroes != null)
{
    <div class="component-root">
        <div class="fog-container filter-container">
            <HeroFilterComponent FilterRequest="@_filterRequest" SearchString="@_searchString"
                                 OnFilterChanged="@OnFilterChanged" OnSearchStringChanged="@OnSearch"/>
        </div>
        <div class="heroes-grid-layout">
            @foreach (var hero in _heroes)
            {
                <a class="anchor-inherited-style" href="@FogUrlBuilder.PageRoutes.Hero(hero.Id)">
                    <HeroItem Hero="@hero"/>
                </a>
            }
        </div>
    </div>
}

@code {
    private IReadOnlyCollection<HeroBasicViewModel>? _heroes;
    private string? _searchString = string.Empty;

    private HeroFilterRequest _filterRequest = HeroFilterRequest.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _heroes = await LoadWithPersistenceAsync(
            nameof(_heroes),
            async () => await HeroProfileUiService.GetHeroes()
        );

        if (OperatingSystem.IsBrowser())
        {
            var savedRequest = await PersistenceService.GetItemAsync<HeroFilterRequest?>(PersistenceKeys.HERO_FILTER_REQUEST);
            if (savedRequest != null)
            {
                _filterRequest = savedRequest;
                _heroes = await HeroProfileUiService.GetHeroes(_filterRequest);
            }
        }
    }

    private async Task OnSearch(string? value)
    {
        _searchString = value;
        if (string.IsNullOrWhiteSpace(value))
        {
            _heroes = await HeroProfileUiService.GetHeroes();
        }
        else
        {
            _heroes = await HeroProfileUiService.GetHeroes(_searchString!);
        }
        
    }

    private async Task OnFilterChanged(HeroFilterRequest request)
    {
        _filterRequest = request;
        await PersistenceService.SetItemAsync(PersistenceKeys.HERO_FILTER_REQUEST, _filterRequest);
        _heroes = await HeroProfileUiService.GetHeroes(_filterRequest);
    }

}