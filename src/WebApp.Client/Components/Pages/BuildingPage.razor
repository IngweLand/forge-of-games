@attribute [Route(FogUrlBuilder.PageRoutes.BUILDING_TEMPLATE)]
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.City
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Hoh.Enums
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
@inject ICityUiService CityUiService;
@inject IAssetUrlProvider AssetUrlProvider;
<PageTitle>@_pageTitle</PageTitle>
@if (_buildingGroup != null)
{
    <div class="content-wrapper">
        <!-- Header -->
        <div class="p-2 fog-container header-container">
            <div class="group-name">@_buildingGroup.Name</div>
            <hr class="w-100 header-divider">
            <div class="d-flex justify-content-center align-items-center gap-2">
                <div class="unit-type-name user-select-none">@_buildingGroup.CityName</div>
                <div class="unit-type-name user-select-none">|</div>
                <img class="unit-type-icon" src="@AssetUrlProvider.GetHohIconUrl("icon_terrain_land")"/>
                <div class="unit-type-name user-select-none">@_buildingGroup.BuildingSize</div>
            </div>
        </div>

        <div class="container">
            <h4 class="text-center user-select-none">@Loc[FogResource.Hoh_Levels]</h4>
        </div>

        <div class="fog-container">

            @foreach (var level in _buildingGroup.Buildings)
            {
                <BuildingLevelComponent LevelData="@level"/>
            }

        </div>
    </div>
}

@code {

    [Parameter]
    public required string CityId { get; set; }

    [Parameter]
    public required string BuildingGroup { get; set; }

    private string _pageTitle = null!;

    private BuildingGroupViewModel? _buildingGroup;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (!Enum.TryParse<CityId>(CityId, true, out var cityId) || !Enum.TryParse<BuildingGroup>(BuildingGroup, true, out var buildingGroup))
        {
            return;
        }

        _buildingGroup = await LoadWithPersistenceAsync(nameof(_buildingGroup),
            () => CityUiService.GetBuildingGroupAsync(cityId, buildingGroup));

        _pageTitle = _buildingGroup != null ? 
            Loc[FogResource.Building_PageTitle, _buildingGroup.Name] :
            Loc[FogResource.Building_PageTitle];
    }

}