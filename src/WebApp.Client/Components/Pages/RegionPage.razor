@attribute [Route(FogUrlBuilder.PageRoutes.CAMPAIGN_REGION_TEMPLATE)]
@inject ICampaignUiService CampaignUiService;
@inject ICampaignDifficultyIconUrlProvider CampaignDifficultyIconUrlProvider
@inject IPersistenceService PersistenceService
@inject IBattleSearchRequestFactory BattleSearchRequestFactory
@inject NavigationManager NavigationManager
@inject IAssetUrlProvider AssetUrlProvider
@using Ingweland.Fog.Application.Client.Web.Factories.Interfaces
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Models
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.Services.Abstractions
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Battle
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Dtos.Hoh.Battle
@using Ingweland.Fog.Models.Hoh.Enums
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
<PageTitle>@_pageTitle</PageTitle>
@if (_region != null)
{
    <div class="d-flex flex-column align-items-center gap-3 pb-4">
        <div class="container-fluid py-3 fog-container">
            <h3 class="text-center mb-3 user-select-none">@_region!.Name</h3>
            <hr class="w-100 mb-3">
            <div class="d-flex flex-wrap justify-content-center gap-4">
                @foreach (var reward in _currentRewards)
                {
                    <ResourceWithValue ResourceValue="@reward"/>
                }
            </div>
        </div>
        <div class="encounter-section-title-container">
            <span class="encounter-section-title user-select-none">@Loc[FogResource.Hoh_Encounters]</span>
            <div class="options-container">
                <div class="option-items left">
                    <img class="difficulty-icon" src="@_difficultyIcon"/>
                    <MudSwitch T="bool" ValueChanged="OnDifficultyChange" Color="Color.Error"
                               Value="_isChecked" Label="@_difficultyLabel"/>
                </div>
                <div class="option-items right">
                    <div class="units-grouping-control-buttons-container">
                        <img src="@AssetUrlProvider.GetHohIconUrl("icon_unit_stat_SquadSpacing")">
                        <MudTooltip Text="@UnitGroupingButtonTooltip" Delay="500">
                            <MudToggleIconButton Icon="@Icons.Material.Filled.UnfoldMore"
                                                 ToggledIcon="@Icons.Material.Filled.UnfoldLess"
                                                 @bind-Toggled="_isExpanded"/>
                        </MudTooltip>
                    </div>
                    <MudTooltip Text="@Loc[FogResource.Tooltip_BattleLog]" Delay="500">
                        <div class="battles-button" @onclick="NavigateToBattles">
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_flat_pvp_results")">
                        </div>
                    </MudTooltip>
                </div>
            </div>
        </div>

        @foreach (var encounter in _region.Encounters)
        {
            <EncounterComponent Difficulty="@_difficulty" IsExpanded="@_isExpanded" Encounter="@encounter"/>
        }
    </div>
}

@code {

    [Parameter]
    public string RegionId { get; set; }

    private string _pageTitle = null!;
    private RegionViewModel? _region;
    private bool _isExpanded;
    private Difficulty _difficulty = Difficulty.Normal;
    private string _difficultyLabel;
    private string _difficultyIcon;
    private bool _isChecked;

    private string UnitGroupingButtonTooltip => _isExpanded
        ? Loc[FogResource.Tooltip_Battle_Squads_Aggregate]
        : Loc[FogResource.Tooltip_Battle_Squads_Disaggregate];

    private IReadOnlyCollection<IconLabelItemViewModel> _currentRewards = Array.Empty<IconLabelItemViewModel>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _region = await LoadWithPersistenceAsync(nameof(_region),
            async () => await CampaignUiService.GetRegionAsync(RegionId));

        if (_region != null)
        {
            _pageTitle = Loc[FogResource.CampaignRegion_PageTitle, _region.Name];
            UpdateDifficultyState();
        }

        if (OperatingSystem.IsBrowser())
        {
            var difficulty = (await PersistenceService.GetUiSettingsAsync()).CampaignDifficulty;
            difficulty = difficulty == Difficulty.Hard ? Difficulty.Hard : Difficulty.Normal;
            if (difficulty != _difficulty)
            {
                _difficulty = difficulty;
                UpdateDifficultyState();
            }
        }
    }

    private void UpdateDifficultyState()
    {
        _isChecked = _difficulty == Difficulty.Hard;
        _difficultyIcon = CampaignDifficultyIconUrlProvider.GetIconUrl(_difficulty);
        _currentRewards = _region!.Rewards[_difficulty];
        _difficultyLabel = _difficulty == Difficulty.Hard ? Loc[FogResource.Battle_Difficulty_Hard] : Loc[FogResource.Battle_Difficulty_Normal];
    }

    private async Task OnDifficultyChange(bool isChecked)
    {
        _difficulty = isChecked ? Difficulty.Hard : Difficulty.Normal;
        UpdateDifficultyState();

        if (OperatingSystem.IsBrowser())
        {
            var uiSettings = await PersistenceService.GetUiSettingsAsync();
            uiSettings.CampaignDifficulty = _difficulty;
            await PersistenceService.SaveUiSettingsAsync(uiSettings);
        }
    }

    private void NavigateToBattles()
    {
        var query = BattleSearchRequestFactory.CreateQueryParams(new BattleSearchRequest
        {
            BattleType = BattleType.Campaign,
            CampaignRegion = _region!.RegionId,
            Difficulty = _difficulty,
        });

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(FogUrlBuilder.PageRoutes.BATTLE_LOG_PATH, query), false);
    }

}