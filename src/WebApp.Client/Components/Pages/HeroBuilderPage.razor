@page "/tools/hero-builder"
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Units
@using Ingweland.Fog.WebApp.Client.Components.Elements
@using Microsoft.Extensions.Localization
@rendermode InteractiveWebAssembly
@inject IUnitUiService UnitUiService
@inject IStringLocalizer<FogResource> Loc
<HeadContent>
    <meta name="description"
          content="Precisely configure your hero's potential by adjusting critical properties - the tool for Heroes of History">
    <meta name="keywords"
          content="Heroes of History tools, hero builder, hero stats, hero power, hero support squad, hoh tools, hoh calculator, heroes, hero leveling, hero resources, hero cost">
</HeadContent>
<PageTitle>Hero builder for Heroes of History on Forge of Games</PageTitle>
<div class="component-root vertical-layout">
    <div class="vertical-layout text-container">
        <div class="tool-title">@Loc[FogResource.Tools_HeroBuilder_Name]</div>
        <div>@Loc[FogResource.Tools_HeroBuilder_Description]</div>
    </div>
    <div class="fog-container vertical-layout tool-container">
        @if (_heroes == null)
        {
            <div class="d-flex justify-content-center align-items-center vh-100">
                <div class="spinner-grow" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <HeroSelectorComponent Heroes="@_heroes" HeroChanged="OnHeroChanged"/>

            @if (_hero != null)
            {
                <HeroBuilderComponent HeroId="@_hero.Id"/>
            }
        }
    </div>
</div>

@code {
    private IReadOnlyCollection<HeroBasicViewModel>? _heroes;
    private HeroViewModel? _hero;

    protected override async Task OnInitializedAsync()
    {
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }

        _heroes = await UnitUiService.GetHeroListAsync();
    }

    private async Task OnHeroChanged(HeroBasicViewModel selectedHero)
    {
        _hero = null;
        var hero = await UnitUiService.GetHeroAsync(selectedHero.Id);
        if (hero == null)
        {
            return;
        }

        _hero = hero;
        StateHasChanged();
    }
}