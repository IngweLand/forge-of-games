@attribute [Route(FogUrlBuilder.PageRoutes.WONDER_TEMPLATE)]
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.City
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Hoh.Enums
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
@inject ICityUiService CityUiService;
<PageTitle>@_pageTitle</PageTitle>
@if (_wonder != null)
{
    <div class="content-wrapper">
        <!-- Header -->
        <div class="fog-container header-container">
            <div class="group-name">@_wonder.Name</div>
            <hr class="w-100 header-divider">
            <div class="unit-type-name user-select-none">@_wonder.CityName</div>
        </div>

        <div class="container">
            <h4 class="text-center user-select-none">@Loc[FogResource.Hoh_Levels]</h4>
        </div>

        <div class="fog-container">

            @foreach (var level in _wonder.Levels)
            {
                <WonderLevelComponent LevelData="@level"/>
            }

        </div>
    </div>
}

@code {

    [Parameter]
    public required string WonderId { get; set; }

    private string _pageTitle = "Wonder - Heroes of History";

    private WonderViewModel? _wonder;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!Enum.TryParse<WonderId>(WonderId, true, out var wonderId))
        {
            return;
        }

        _wonder = await LoadWithPersistenceAsync(nameof(_wonder), () => CityUiService.GetWonderAsync(wonderId));

        if (_wonder != null)
        {
            _pageTitle = Loc[FogResource.Wonder_PageTitle, _wonder.Name];
        }
    }

}