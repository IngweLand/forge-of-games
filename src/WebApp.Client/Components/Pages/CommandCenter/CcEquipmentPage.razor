@attribute [Route(FogUrlBuilder.PageRoutes.COMMAND_CENTER_EQUIPMENT_PATH)]
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Equipment
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Hoh.Enums
@using Ingweland.Fog.WebApp.Client.Components.Elements.CommandCenter
@inherits CommandCenterPageBase
@if (IsInitialized)
{
    <div class="component-root">

        @if (_equipment is {Count: > 0})
        {
            <MudDataGrid DragDropColumnReordering="false" Filterable="false" Hideable="true" ShowMenuIcon="true"
                         Groupable="false"
                         Items="@_equipment" Height="0" Style="display: flex; flex-direction: column; flex: 1; "
                         Virtualize="true" HeaderClass="table-head-bordered" HorizontalScrollbar="true" Bordered="true"
                         Dense="true" FixedHeader="true">
                <Columns>
                    <PropertyColumn Filterable="true" Property="x => x.EquipmentSlotType" Groupable="true"
                                    Title="@Loc[FogResource.Equipment_Slot]">
                        <CellTemplate>
                            <img class="icon" src="@context.Item.EquipmentSlotTypeIconUrl"/>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Filterable="true" Property="x => x.EquipmentSet" Groupable="true"
                                    Title="@Loc[FogResource.Equipment_Set]">
                        <CellTemplate>
                            <img class="icon" src="@context.Item.EquipmentSetIconUrl"/>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Filterable="true" Property="x => x.StarCount" Groupable="true" Title="⭐">
                        <CellTemplate>
                            @context.Item.StarCount ⭐
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Filterable="true" Property="x => x.Level" Groupable="true"
                                    Title="@Loc[FogResource.Hoh_Lvl]">
                        <CellTemplate>
                            @context.Item.Level
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.EquippedOnHero" Groupable="true"
                                    Title="@Loc[FogResource.Hoh_Hero]">
                        <CellTemplate>
                            <img class="avatar" src="@context.Item.EquippedOnHeroPortraitUrl"/>
                        </CellTemplate>
                    </PropertyColumn>

                    @* main attributes *@
                    @foreach (var statAttribute in _attributes)
                    {
                        <PropertyColumn T="EquipmentItemViewModel" TProperty="EquipmentItemAttributeViewModel?"
                                        Property="x => GetMainAttributeProperty(x, statAttribute.StatAttribute)"
                                        Title="@statAttribute.Title"
                                        HeaderStyle="background-color: var(--fog-container-color);">
                            <CellTemplate>
                                @GetMainAttributeValue(context.Item, statAttribute.StatAttribute)
                            </CellTemplate>
                        </PropertyColumn>
                    }

                    @* sub attributes *@
                    @foreach (var statAttribute in _attributes)
                    {
                        <PropertyColumn T="EquipmentItemViewModel" TProperty="EquipmentItemSubAttributeViewModel?"
                                        Property="x => GetSubAttributeProperty(x, statAttribute.StatAttribute)"
                                        Title="@statAttribute.Title">
                            <CellTemplate>
                                @RenderCell(context.Item, statAttribute.StatAttribute)

                            </CellTemplate>
                        </PropertyColumn>
                    }
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudButton Style="align-self: center; justify-self: center" Variant="Variant.Filled"
                       OnClick="() => NavigationManager.NavigateTo(FogUrlBuilder.PageRoutes.HELP_EQUIPMENT_PATH)">
                @Loc[FogResource.Equipment_ImportEquipment]
            </MudButton>
        }
    </div>
}
else
{
    <LoadingIndicator/>
}

<style>
    .mud-table-container {
        flex-grow: 1 !important;
        width: 100% !important;
    }

    .mud-table-cell {
        font-size: 12px !important;
        padding-inline-start: 4px !important;
        padding-inline-end: 4px !important;
        padding: 6px !important;
        white-space: nowrap !important;
    }

    .mud-table-sort-label-icon {
        font-size: 12px !important;
    }

    th {
        text-align: center !important;
    }

    .sub-attribute-cell {
        display: flex;
        flex-direction: column;
        gap: 2px;
        align-items: flex-start;
        justify-content: space-evenly;
        height: 32px;
    }

    .mud-toolbar {
        height: auto !important;
        padding-bottom: 4px !important;
    }

</style>

@code
{
    private RenderFragment RenderCell(EquipmentItemViewModel item, StatAttribute statAttribute) => __builder =>
    {
        var subAttributeVm = item.SubAttributes.GetValueOrDefault(statAttribute, null);
        <div class="sub-attribute-cell">
            <EquipmentRolledValueComponent
                Value="@subAttributeVm?.RolledValuePercent"
                FormattedValue="@subAttributeVm?.FormattedRolledValue"/>
            <span>@((MarkupString) (subAttributeVm?.FormattedValue ?? string.Empty))</span>
        </div>
    };
}
