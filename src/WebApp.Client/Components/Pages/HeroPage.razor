@page "/heroes/{heroId}"
@using System.Globalization
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.Services.Abstractions
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Units
@using Ingweland.Fog.WebApp.Client.Components.Elements
@using Microsoft.Extensions.Localization
@implements IDisposable;
@inject IUnitUiService UnitUiService;
@inject PersistentComponentState ApplicationState;
@inject IAssetUrlProvider AssetUrlProvider;
@inject IWikipediaService WikipediaService;
@inject IStringLocalizer<FogResource> Loc
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly
@attribute [StreamRendering]
<HeadContent>
    <meta name="description"
          content="Comprehensive hero database for Heroes of History. Discover hero levels, resources, power stats, and historical backgrounds.">
    <meta name="keywords" content="Heroes of History heroes, hero stats, hero levels, hero ability, game characters">
</HeadContent>
<PageTitle>@_pageTitle</PageTitle>

<div class="content-wrapper">
    <!-- Header -->
    <div class="p-2 fog-container header-container">
        <div class="d-flex justify-content-center gap-1 stars-container">
            @if (_hero != null)
            {
                for (var i = 0; i < _hero.StarCount; i++)
                {
                    <img src="@AssetUrlProvider.GetHohIconUrl("star-filled", ".svg")"/>
                }
            }
        </div>
        <div class="hero-name">@_hero?.Name</div>
        <hr class="w-100 header-divider">
        <div class="d-flex justify-content-center align-items-center gap-2">
            <img class="unit-type-icon" src="@_hero?.UnitTypeIconUrl"/>
            <div class="unit-type-name user-select-none">@_hero?.UnitTypeName</div>
        </div>
    </div>

    <!-- Media Content -->
    <div class="media-content-container">
        <div class="media-container">
            @if (_hero != null)
            {
                if (_showVideo && _hero.VideoUrl != null)
                {
                    <video autoplay loop muted playsinline @onerror="OnVideoError">
                        <source src="@_hero.VideoUrl" type="video/mp4" @onerror="OnVideoError">
                        Your browser does not support the video tag.
                    </video>
                }
                else if (_hero.ImageUrl != null)
                {
                    <img src="@_hero.ImageUrl"/>
                }
            }
        </div>
        @if (_showInfoContainer)
        {
            <div class="fog-container info-container">
                @if (_wikiExtract != null)
                {
                    <div class="info-text-container"> @_wikiExtract</div>
                    <a href="@_wikiUrl" target="_blank">
                        <div class="btn btn-secondary btn-sm align-self-end">@Loc[FogResource.Common_ReadMore]
                        </div>
                    </a>
                }
                else
                {
                    <div class="spinner-grow loading-indicator" style="color: var(--fog-icon-color)" role="status">
                    </div>
                }
            </div>
        }


    </div>

    <div class="container segmented-control-container">
        <div class="row">
            <div class="col-12 col-xl-10 col-xxl-8 mx-auto">
                <div class="btn-group">
                    <input autocomplete="off" checked class="btn-check" id="option1" name="options"
                           @onchange="@(() => SwitchContent(1))" type="radio" value="1">
                    <label class="btn btn-primary d-flex align-items-center justify-content-center gap-2"
                           for="option1">
                        <img src="@AssetUrlProvider.GetHohIconUrl("icon_flat_upgrade")"/>
                        <span>@Loc[FogResource.Hoh_Levels]</span>
                    </label>

                    <input autocomplete="off" class="btn-check" id="option2" name="options"
                           @onchange="@(() => SwitchContent(2))"
                           type="radio" value="2" disabled="@_isLoading">
                    <label class="btn btn-primary d-flex align-items-center justify-content-center gap-2"
                           for="option2">
                        @if (_isLoading)
                        {
                            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_flat_ability")"/>
                            <span>@Loc[FogResource.Hoh_Hero_Ability]</span>
                        }
                    </label>

                    <input autocomplete="off" class="btn-check" id="option3" name="options"
                           @onchange="@(() => SwitchContent(3))"
                           type="radio" value="3" disabled="@_isLoading">
                    <label class="btn btn-primary d-flex align-items-center justify-content-center gap-2"
                           for="option3">
                        @if (_isLoading)
                        {
                            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_hero_power")"/>
                            <span>@Loc[FogResource.Hoh_Hero_Create]</span>
                        }
                    </label>
                </div>
            </div>
        </div>
    </div>

    <div class="fog-container">
        @switch (_selectedOption)
        {
            case 1:
            {
                if (_hero != null)
                {
                    foreach (var level in _hero.Levels)
                    {
                        <HeroLevelComponent LevelData="@level"/>
                    }
                }

                break;
            }
            case 2:
            {
                if (_ability != null)
                {
                    <HeroAbilityComponent Ability="@_ability"/>
                }
                else
                {
                    <div class="spinner-grow loading-indicator" style="color: var(--fog-icon-color)" role="status">
                    </div>
                }

                break;
            }

            case 3:
            {
                <HeroBuilderComponent HeroId="@HeroId"/>

                break;
            }
        }
    </div>
</div>

@code {
    private PersistingComponentStateSubscription? _persistingSubscription;

    [Parameter]
    public required string HeroId { get; set; }

    private string _pageTitle = "Hero";
    private HeroAbilityViewModel? _ability;

    private HeroViewModel? _hero;
    private string? _wikiExtract;
    private string? _wikiUrl;
    private bool _showInfoContainer = true;
    private bool _isLoading = true;
    private bool _showVideo = true;

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);
        if (!ApplicationState.TryTakeFromJson<HeroViewModel>(nameof(_hero), out var restored))
        {
            var hero = await UnitUiService.GetHeroAsync(HeroId);

            if (hero == null)
            {
                return;
            }

            _pageTitle = $"Hero - {hero.Name}";
            _hero = hero;
        }
        else
        {
            _hero = restored!;
        }

        if (OperatingSystem.IsBrowser())
        {
            _isLoading = false;
            await LoadWikiSummary();
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(_hero), _hero);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _persistingSubscription?.Dispose();
    }

    private int _selectedOption = 1;

    private async Task SwitchContent(int option)
    {
        _selectedOption = option;
        switch (_selectedOption)
        {
            case 2 when _ability == null:
            {
                _ability = await UnitUiService.GetHeroAbilityAsync(HeroId);
                break;
            }
            case 3:
            {
                NavigationManager.NavigateTo($"command-center/playgrounds/heroes/{HeroId}");
                return;
            }
        }

        StateHasChanged();
    }

    private async Task LoadWikiSummary()
    {
        if (_hero == null)
        {
            return;
        }

        var wikipediaResponse = await WikipediaService.GetArticleAbstractAsync(_hero.Name, CultureInfo.CurrentCulture.TwoLetterISOLanguageName);
        if (wikipediaResponse != null)
        {
            _wikiUrl = OperatingSystem.IsAndroid() || OperatingSystem.IsIOS() ? wikipediaResponse.ContentUrls?.Mobile?.Page : wikipediaResponse.ContentUrls?.Desktop?.Page;
            _wikiExtract = wikipediaResponse.Extract;
        }
        else
        {
            _showInfoContainer = false;
        }
    }

    private void OnVideoError()
    {
        _showVideo = false;
    }

}