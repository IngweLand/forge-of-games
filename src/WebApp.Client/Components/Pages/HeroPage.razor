@attribute [Route(FogUrlBuilder.PageRoutes.HERO_TEMPLATE)]
@inject IUnitUiService UnitUiService;
@inject IAssetUrlProvider AssetUrlProvider;
@inject IWikipediaService WikipediaService;
@inject NavigationManager NavigationManager
@using System.Globalization
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Units
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Application.Core.Services
@using Ingweland.Fog.Dtos.Hoh
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
<PageTitle>@_pageTitle</PageTitle>
@if (_hero != null)
{
    <div class="content-wrapper">
        <!-- Header -->
        <div class="p-2 fog-container header-container">
            <div class="d-flex justify-content-center gap-1 stars-container">
                @for (var i = 0; i < _hero.StarCount; i++)
                {
                    <img src="@AssetUrlProvider.GetHohIconUrl("star-filled", ".svg")"/>
                }
            </div>
            <div class="hero-name">@_hero.Name</div>
            <hr class="w-100 header-divider">
            <div class="d-flex justify-content-center align-items-center gap-2">
                <img class="unit-type-icon" src="@_hero.UnitTypeIconUrl"/>
                <div class="unit-type-name user-select-none">@_hero.UnitTypeName</div>
            </div>
        </div>

        <!-- Media Content -->
        <div class="media-content-container">
            <div class="media-container">
                @if (_showVideo && _hero.VideoUrl != null)
                {
                    <video autoplay loop muted playsinline @onerror="OnVideoError">
                        <source src="@_hero.VideoUrl" type="video/mp4" @onerror="OnVideoError">
                        Your browser does not support the video tag.
                    </video>
                }
                else if (_hero.ImageUrl != null)
                {
                    <img src="@_hero.ImageUrl"/>
                }
            </div>
            @if (_showInfoContainer)
            {
                <div class="fog-container info-container">
                    @if (_wikipediaResponse != null)
                    {
                        <div class="info-text-container"> @_wikipediaResponse.Extract</div>
                        <a href="@_wikiUrl" target="_blank">
                            <div class="btn btn-secondary btn-sm align-self-end">@Loc[FogResource.Common_ReadMore]
                            </div>
                        </a>
                    }
                    else
                    {
                        <div class="spinner-grow loading-indicator" style="color: var(--fog-icon-color)" role="status">
                        </div>
                    }
                </div>
            }


        </div>

        <div class="container segmented-control-container">
            <div class="row">
                <div class="col-12 col-xl-10 col-xxl-8 mx-auto">
                    <div class="btn-group">
                        <input autocomplete="off" checked class="btn-check" id="option1" name="options"
                               @onchange="@(() => SwitchContent(1))" type="radio" value="1">
                        <label class="btn btn-primary d-flex align-items-center justify-content-center gap-2"
                               for="option1">
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_flat_upgrade")"/>
                            <span>@Loc[FogResource.Hoh_Levels]</span>
                        </label>

                        <input autocomplete="off" class="btn-check" id="option2" name="options"
                               @onchange="@(() => SwitchContent(2))"
                               type="radio" value="2">
                        <label class="btn btn-primary d-flex align-items-center justify-content-center gap-2"
                               for="option2">
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_flat_ability")"/>
                            <span>@Loc[FogResource.Hoh_Hero_Ability]</span>
                        </label>

                        <input autocomplete="off" class="btn-check" id="option3" name="options"
                               @onchange="@(() => SwitchContent(3))"
                               type="radio" value="3">
                        <label class="btn btn-primary d-flex align-items-center justify-content-center gap-2"
                               for="option3">
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_hero_power")"/>
                            <span>@Loc[FogResource.Hoh_Hero_Create]</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="fog-container">
            @switch (_selectedOption)
            {
                case 1:
                {
                    foreach (var level in _hero.Levels)
                    {
                        <HeroLevelComponent LevelData="@level"/>
                    }

                    break;
                }
                case 2:
                {
                    if (_ability != null)
                    {
                        <HeroAbilityComponent Ability="@_ability"/>
                    }
                    else
                    {
                        <div class="spinner-grow loading-indicator" style="color: var(--fog-icon-color)" role="status">
                        </div>
                    }

                    break;
                }
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public required string HeroId { get; set; }

    private string _pageTitle = null!;
    private HeroAbilityViewModel? _ability;

    private HeroViewModel? _hero;
    private string? _wikiUrl;
    private bool _showInfoContainer = true;
    private bool _showVideo = true;
    private WikipediaResponseDto? _wikipediaResponse;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hero = await LoadWithPersistenceAsync(nameof(_hero), () => UnitUiService.GetHeroAsync(HeroId));

        if (_hero != null)
        {
            _pageTitle = Loc[FogResource.Hero_PageTitle, _hero.Name];
            _wikipediaResponse = await LoadWithPersistenceAsync(nameof(_wikipediaResponse), () => WikipediaService.GetArticleAbstractAsync(_hero.Name, CultureInfo.CurrentCulture.TwoLetterISOLanguageName));
        }


        if (OperatingSystem.IsBrowser())
        {
            SetupWikiAbstract();
        }
    }

    private int _selectedOption = 1;

    private async Task SwitchContent(int option)
    {
        _selectedOption = option;
        switch (_selectedOption)
        {
            case 2 when _ability == null:
            {
                _ability = await UnitUiService.GetHeroAbilityAsync(HeroId);
                break;
            }
            case 3:
            {
                NavigationManager.NavigateTo($"command-center/playgrounds/heroes/{HeroId}");
                return;
            }
        }

        StateHasChanged();
    }

    private void SetupWikiAbstract()
    {
        if (_wikipediaResponse != null)
        {
            _wikiUrl = OperatingSystem.IsAndroid() || OperatingSystem.IsIOS() ? 
                _wikipediaResponse.MobileUrl : _wikipediaResponse.DesktopUrl;
        }
        else
        {
            _showInfoContainer = false;
        }
    }

    private void OnVideoError()
    {
        _showVideo = false;
    }

}