@attribute [Route(FogUrlBuilder.PageRoutes.TREASURE_HUNT_STAGE_TEMPLATE)]
@using Ingweland.Fog.Application.Client.Web.Factories.Interfaces
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Battle
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Hoh.Enums

@using Ingweland.Fog.Dtos.Hoh.Battle
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
@inject ITreasureHuntUiService TreasureHuntUiService
@inject IBattleSearchRequestFactory BattleSearchRequestFactory
@inject NavigationManager NavigationManager
@inject IAssetUrlProvider AssetUrlProvider
<PageTitle>@_pageTitle</PageTitle>
@if (_stage != null)
{
    <div class="content-wrapper">
        <!-- Header -->
        <div class="p-2 fog-container header-container">
            <img class="difficulty-icon" src="@_stage.DifficultyIconUrl"/>
            <div class="difficulty-name">@_stage.DifficultyName</div>
            <hr class="w-100 header-divider">
            <div class="stage-name user-select-none">@_stage.Name</div>
        </div>
        <div class="encounter-section-title-container">
            <span class="encounter-section-title user-select-none">@Loc[FogResource.Hoh_Encounters]</span>
            <div class="options-container">
                <div class="option-items right">
                    <div class="units-grouping-control-buttons-container">
                        <img src="@AssetUrlProvider.GetHohIconUrl("icon_unit_stat_SquadSpacing")">
                        <MudTooltip Text="@UnitGroupingButtonTooltip" Delay="500">
                            <MudToggleIconButton Icon="@Icons.Material.Filled.UnfoldMore"
                                                 ToggledIcon="@Icons.Material.Filled.UnfoldLess"
                                                 @bind-Toggled="_isExpanded"/>
                        </MudTooltip>
                    </div>
                    <MudTooltip Text="@Loc[FogResource.Tooltip_BattleLog]" Delay="500">
                        <div class="battles-button" @onclick="NavigateToBattles">
                            <img src="@AssetUrlProvider.GetHohIconUrl("icon_flat_pvp_results")">
                        </div>
                    </MudTooltip>
                </div>
            </div>
        </div>
        @foreach (var encounter in _stage.Encounters)
        {
            <TreasureHuntEncounterComponent IsExpanded="@_isExpanded" Encounter="@encounter"/>
        }
    </div>
}


@code {
    
    private string UnitGroupingButtonTooltip => _isExpanded
        ? Loc[FogResource.Tooltip_Battle_Squads_Aggregate]
        : Loc[FogResource.Tooltip_Battle_Squads_Disaggregate];

    [Parameter]
    public int Difficulty { get; set; }

    [Parameter]
    public int StageIndex { get; set; }

    private string _pageTitle = null!;
    private TreasureHuntStageViewModel? _stage;
    private bool _isExpanded;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _stage = await LoadWithPersistenceAsync(
            nameof(_stage),
            () => TreasureHuntUiService.GetStageAsync(Difficulty, StageIndex)
        );

        if (_stage != null)
        {
            _pageTitle = Loc[FogResource.TreasureHuntStage_PageTitle, $"{_stage.DifficultyName} - {_stage.Name}"];
        }
    }

    private void NavigateToBattles()
    {
        var query = BattleSearchRequestFactory.CreateQueryParams(new BattleSearchRequest
        {
            BattleType = BattleType.TreasureHunt,
            TreasureHuntDifficulty = Difficulty,
            TreasureHuntStage = StageIndex,
        });

        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                FogUrlBuilder.PageRoutes.BATTLE_LOG_PATH, query.AsReadOnly()), false);
    }

}