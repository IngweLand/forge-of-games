@attribute [Route(FogUrlBuilder.PageRoutes.BUILDING_COST_CALCULATOR_PATH)]
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Services.Hoh.Abstractions
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.City
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Tools
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Hoh.Enums
@inherits Ingweland.Fog.WebApp.Client.Components.Pages.Abstractions.FogPageBase
@inject ICityUiService CityUiService;
@inject IToolsUiService ToolsUiService
@if (_cities != null)
{
    <div class="component-root vertical-layout">
        <div class="vertical-layout text-container">
            <div class="tool-title">@Loc[FogResource.Tools_BuildingCost_Name]</div>
            <div class="tool-description">@Loc[FogResource.Tools_BuildingCost_Description]</div>
        </div>
        <div class="fog-container vertical-layout tool-container">
            @* city selector *@
            <MudSelect Label="@Loc[FogResource.Hoh_City]"
                       @bind-Value="@_selectedCity" SelectedValuesChanged="OnCitiesSelectedValuesChanged"
                       T="CityBuildingGroupsViewModel" Variant="Variant.Outlined">

                @foreach (var city in _cities)
                {
                    <MudSelectItem Value="city">@city.CityName</MudSelectItem>
                }
            </MudSelect>

            @* building selector *@
            @if (_selectedCity != null)
            {
                <MudSelect Label="@Loc[FogResource.Hoh_Building]"
                           @bind-Value="@_selectedBuildingGroup" T="BuildingGroupBasicViewModel"
                           SelectedValuesChanged="OnBuildingSelectedValuesChanged" Variant="Variant.Outlined">

                    @foreach (var buildingType in _selectedCity.BuildingTypes)
                    {
                        <MudSelectItem T="BuildingGroupBasicViewModel" Disabled="true"
                                       Style="background-color: var(--fog-container-color); color: var(--fog-text-on-dark-color) !important;">@buildingType.Name</MudSelectItem>
                        @foreach (var group in buildingType.Groups)
                        {
                            <MudSelectItem Value="group">@group.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            }

            @* current level selector *@
            @if (_fromLevels != null)
            {
                <MudSelect Label="@Loc[FogResource.Tools_CurrentLevel]"
                           @bind-Value="@_currentLevel" T="BuildingLevelSpecs"
                           SelectedValuesChanged="OnCurrentLevelSelectedValuesChanged" Variant="Variant.Outlined">

                    @foreach (var levelSpecs in _fromLevels)
                    {
                        <BuildingLevelSelectItemComponent LevelSpecs="levelSpecs"/>
                    }
                </MudSelect>
            }

            @* target level selector *@
            @if (_toLevels != null)
            {
                <MudSelect Label="@Loc[FogResource.Tools_TargetLevel]"
                           @bind-Value="@_targetLevel" T="BuildingLevelSpecs"
                           SelectedValuesChanged="OnDesiredLevelSelectedValuesChanged" Variant="Variant.Outlined">

                    @foreach (var levelSpecs in _toLevels)
                    {
                        <BuildingLevelSelectItemComponent LevelSpecs="levelSpecs"/>
                    }
                </MudSelect>
            }

            @if (_costs != null)
            {
                <BuildingMultilevelCostComponent Costs="_costs"/>
            }
        </div>
    </div>
}

@code {
    private IReadOnlyCollection<CityBuildingGroupsViewModel>? _cities;
    private CityBuildingGroupsViewModel? _selectedCity;
    private BuildingGroupBasicViewModel? _selectedBuildingGroup;
    private BuildingGroupViewModel? _selectedBuildingGroupDetails;
    private IList<BuildingLevelSpecs>? _fromLevels;
    private IList<BuildingLevelSpecs>? _toLevels;
    private BuildingLevelSpecs? _currentLevel;
    private BuildingLevelSpecs? _targetLevel;
    private BuildingMultilevelCostViewModel? _costs;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _cities = await LoadWithPersistenceAsync(nameof(_cities),
            async () => await CityUiService.GetCityBuildingGroupsAsync());
        if (RendererInfo.IsInteractive)
        {
            _selectedCity = _cities?.FirstOrDefault();
        }
    }

    private void OnCurrentLevelSelectedValuesChanged()
    {
        _toLevels = null;
        _targetLevel = null;
        _costs = null;

        _toLevels = _selectedBuildingGroupDetails!.Buildings
            .Where(b => b.Level > _currentLevel!.Level && (b.ConstructionComponent != null || b.UpgradeComponent != null))
            .Select(b => b.LevelSpecs)
            .OrderBy(x => x.Level)
            .ToList();
    }

    private void OnDesiredLevelSelectedValuesChanged()
    {
        _costs = ToolsUiService.CalculateBuildingMultiLevelCost(_selectedBuildingGroupDetails!, _currentLevel!.Level, _targetLevel!.Level);
    }

    private async Task OnBuildingSelectedValuesChanged()
    {
        _fromLevels = null;
        _toLevels = null;
        _currentLevel = null;
        _targetLevel = null;
        _costs = null;
        if (!Enum.TryParse<BuildingGroup>(_selectedBuildingGroup?.Id, true, out var group))
        {
            return;
        }

        _selectedBuildingGroupDetails = await CityUiService.GetBuildingGroupAsync(_selectedCity!.CityId, group);
        if (_selectedBuildingGroupDetails == null)
        {
            return;
        }

        var levels = _selectedBuildingGroupDetails.Buildings
            .Where(b => b.ConstructionComponent != null || b.UpgradeComponent != null)
            .Select(b => b.LevelSpecs)
            .OrderBy(x => x.Level)
            .Take(_selectedBuildingGroupDetails.Buildings.Count - 1)
            .ToList();
        _fromLevels = new List<BuildingLevelSpecs>() {BuildingLevelSpecs.ZeroLevel}.Concat(levels).ToList();
    }

    private void OnCitiesSelectedValuesChanged()
    {
        _selectedBuildingGroup = null;
        _fromLevels = null;
        _toLevels = null;
        _currentLevel = null;
        _targetLevel = null;
        _costs = null;
    }

}