@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Units
@inject IAssetUrlProvider AssetUrlProvider;
<div class="component-root">
    <div class="header-container">
        <img src="@Ability.IconUrl"/>
        <div>
            <div class="ability-name">@Ability.Name</div>
            <div class="cost-container">
                <img src="@AssetUrlProvider.GetHohIconUrl("icon_mastery_points")"/>
                <div>@Ability.Levels[_currentLevel].Cost</div>
            </div>
        </div>
    </div>


    <div class="ability-level-title">@Ability.Levels[_currentLevel].Title</div>
    <div>@((MarkupString) Ability.Levels[_currentLevel].Description)</div>
    <div class="navigation-container">
        <div class="navigation-btn" style="visibility: @(_previousButtonsAreVisible ? "visible" : "hidden")"
             @onclick="FastRewindLevel">
            <sup>-10</sup><span class="material-symbols-outlined">fast_rewind</span>
        </div>
        <div class="navigation-btn" style="visibility: @(_previousButtonsAreVisible ? "visible" : "hidden")"
             @onclick="ShowPreviousLevel">
            <span class="material-symbols-outlined">chevron_left</span>
        </div>
        <div class="ability-level">@Ability.Levels[_currentLevel].Level</div>
        <div class="navigation-btn" style="visibility: @(_nextButtonsAreVisible ? "visible" : "hidden")"
             @onclick="ShowNextLevel">
            <span class="material-symbols-outlined">chevron_right</span>
        </div>
        <div class="navigation-btn" style="visibility: @(_nextButtonsAreVisible ? "visible" : "hidden")"
             @onclick="FastForwardLevel">
            <span class="material-symbols-outlined">fast_forward</span><sup>+10</sup>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public required HeroAbilityViewModel Ability { get; set; }

    private int _currentLevel;
    private bool _nextButtonsAreVisible = true;
    private bool _previousButtonsAreVisible;

    private void ShowPreviousLevel()
    {
        if (_currentLevel > 0)
        {
            _currentLevel--;
        }

        UpdateNavigationButtonsVisibility();
    }

    private void ShowNextLevel()
    {
        if (_currentLevel < Ability.Levels.Count - 1)
        {
            _currentLevel++;
        }

        UpdateNavigationButtonsVisibility();
    }

    private void FastRewindLevel()
    {
        var nextLevel = _currentLevel - 10;
        if (nextLevel < 0)
        {
            nextLevel = 0;
        }

        _currentLevel = nextLevel;

        UpdateNavigationButtonsVisibility();
    }

    private void FastForwardLevel()
    {
        var nextLevel = _currentLevel + 10;
        if (nextLevel > Ability.Levels.Count - 1)
        {
            nextLevel = Ability.Levels.Count - 1;
        }

        _currentLevel = nextLevel;

        UpdateNavigationButtonsVisibility();
    }

    private void UpdateNavigationButtonsVisibility()
    {
        if (_currentLevel > 0)
        {
            _previousButtonsAreVisible = true;
        }
        else
        {
            _previousButtonsAreVisible = false;
        }

        if (_currentLevel < Ability.Levels.Count - 1)
        {
            _nextButtonsAreVisible = true;
        }
        else
        {
            _nextButtonsAreVisible = false;
        }
    }

}