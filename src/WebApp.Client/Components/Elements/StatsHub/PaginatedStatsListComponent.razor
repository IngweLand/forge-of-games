@inject IStringLocalizer<FogResource> Loc
@using Blazored.LocalStorage
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Fog
@using Ingweland.Fog.Shared.Constants
@using Ingweland.Fog.WebApp.Client.Services.Abstractions
@using Microsoft.Extensions.Localization
@using Size = MudBlazor.Size
@inject IJSInteropService JsInteropService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@typeparam TItem
<div class="content-wrapper">
    @if (_shouldShowContributionPrompt)
    {
        <div class="help-info user-select-none"
             @onclick="OnContributionPromptClick">
            @((MarkupString) Loc[FogResource.StatsHub_ContributePrompt].Value)
        </div>
    }
    <div class="fog-container section">
        <div class="top-container">
            <span class="title">@Title</span>
            <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="ToggleSearchForm"/>
            @if (IsLoading)
            {
                <MudProgressLinear Style="position: absolute; bottom: 0; left: 0" Color="Color.Primary"
                                   Indeterminate="true"/>
            }
        </div>
        <MudCollapse Expanded="@_searchFormIsExpanded">
            <div class="search-form">
                <MudTextField @ref="@_nameSearchField" OnKeyDown="SearchTextFieldOnKeyDown"
                              @bind-Value="@NameSearchString" Label="@Loc[FogResource.StatsHub_NameSearchField_Label]"
                              Variant="Variant.Outlined" Immediate="true" Clearable="true"
                              OnClearButtonClick="Search"/>
                <MudButton Variant="Variant.Filled" OnClick="Search" Style="align-self: end"
                           Disabled="@(string.IsNullOrWhiteSpace(NameSearchString))"
                           Color="Color.Primary">@Loc[FogResource.Common_Search]</MudButton>
            </div>

        </MudCollapse>
        <div class="items-container">

            @if (Items != null)
            {
                @foreach (var item in Items.Items)
                {
                    @ItemTemplate(item)
                }
            }

        </div>
        <div class="pagination-container">
            <MudPagination Count="@(Items?.TotalPages ?? 0)" Selected="@PageNumber"
                           Disabled="@(Items == null)" Size="Size.Large" SelectedChanged="OnPageChanged"/>
        </div>

    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter, EditorRequired]
    public PaginatedList<TItem>? Items { get; set; }

    [Parameter, EditorRequired]
    public int PageNumber { get; set; }

    [Parameter, EditorRequired]
    public string Title { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnPageChanged { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter, EditorRequired]
    public string? NameSearchString
    {
        get => _nameSearchString;
        set
        {
            _nameSearchString = value;
            if (!string.IsNullOrWhiteSpace(_nameSearchString))
            {
                _searchFormIsExpanded = true;
            }
        }
    }

    private bool _searchFormIsExpanded;
    private MudTextField<string> _nameSearchField = null!;
    private string? _nameSearchString;

    private async Task ToggleSearchForm()
    {
        _searchFormIsExpanded = !_searchFormIsExpanded;
        if (_searchFormIsExpanded)
        {
            await _nameSearchField.FocusAsync();
        }
    }

    private Task SearchTextFieldOnKeyDown(KeyboardEventArgs args)
    {
        return args.Key == KeyboardKeys.Enter ? OnSearch.InvokeAsync(NameSearchString) : Task.CompletedTask;
    }

    private async Task Search()
    {
        if (await JsInteropService.IsMobileAsync())
        {
            await _nameSearchField.BlurAsync();
        }

        await OnSearch.InvokeAsync(NameSearchString);
    }

    private async Task OnContributionPromptClick()
    {
        _shouldShowContributionPrompt = false;

        await LocalStorageService.SetItemAsync(ContributionPromptClickedKey, true);

        NavigationManager.NavigateTo(FogUrlBuilder.PageRoutes.HELP_STATS_HUB_PATH);
    }

    private bool _shouldShowContributionPrompt = true;
    private const string ContributionPromptClickedKey = "ContributionPromptClicked";

    protected override async Task OnInitializedAsync()
    {
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }

        _shouldShowContributionPrompt = !await LocalStorageService.GetItemAsync<bool>(ContributionPromptClickedKey);
    }

}