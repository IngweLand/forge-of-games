@inject IStringLocalizer<FogResource> Loc
@inject IJSInteropService JsInteropService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@typeparam TItem
@using Blazored.LocalStorage
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Services.Abstractions
@using Ingweland.Fog.Application.Core.Helpers
@using Microsoft.Extensions.Localization
@implements IAsyncDisposable
<div class="content-wrapper">
    @if (_shouldShowContributionPrompt)
    {
        <div class="help-info user-select-none"
             @onclick="OnContributionPromptClick">
            @((MarkupString) Loc[FogResource.StatsHub_ContributePrompt].Value)
        </div>
    }
    <div class="fog-container section">
        <div class="top-container">
            <span class="title">@Title</span>
            @if (_isLoading)
            {
                <MudProgressLinear Style="position: absolute; bottom: 0; left: 0" Color="Color.Primary"
                                   Indeterminate="true"/>
            }
        </div>
        <div class="search-form">
            <MudTextField @ref="@_nameSearchField" DebounceInterval="500" OnDebounceIntervalElapsed="OnSearch"
                          Value="@_nameSearchString" Label="@Loc[FogResource.StatsHub_NameSearchField_Label]"
                          Variant="Variant.Outlined" Immediate="true" Clearable="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.End"
                          OnClearButtonClick="OnClearButtonClick"/>
        </div>
        <div class="items-container" @ref="_itemsContainer">

            <Virtualize Context="item" @ref="_virtualizeComponent" ItemsProvider="GetItemsAsync" OverscanCount="10">
                <ItemContent>
                    @ItemTemplate(item)
                </ItemContent>
                <Placeholder>
                    <ListItemPlaceholder/>
                </Placeholder>
            </Virtualize>
        </div>

    </div>
</div>

@code {

    private const string CONTRIBUTION_PROMPT_CLICKED_KEY = "ContributionPromptClicked";
    private const int DEBOUNCE_INTERVAL = 150;

    private bool _shouldShowContributionPrompt = true;
    private Virtualize<TItem>? _virtualizeComponent;
    private ElementReference _itemsContainer;
    private bool _isLoading;
    private MudTextField<string> _nameSearchField = null!;
    private string? _nameSearchString;
    private readonly ItemsProviderResult<TItem> _emptyResult = new([], 0);
    private CancellationTokenSource? _currentRequestTokenSource;

    [Parameter]
    [EditorRequired]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    [EditorRequired]
    public string Title { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter]
    [EditorRequired]
    public string? NameSearchString
    {
        get => _nameSearchString;
        set
        {
            if (_nameSearchString == value)
            {
                return;
            }

            _nameSearchString = value;

            if (_virtualizeComponent != null)
            {
                InvokeAsync(async () =>
                {
                    await JsInteropService.ScrollTo(_itemsContainer, 0);
                    await _virtualizeComponent.RefreshDataAsync();
                    StateHasChanged();
                });
            }
        }
    }

    [Parameter]
    [EditorRequired]
    public ItemsProviderDelegate<TItem> ItemsProviderDelegate { get; set; }

    private async ValueTask<ItemsProviderResult<TItem>> GetItemsAsync(ItemsProviderRequest request)
    {
        if (_currentRequestTokenSource != null)
        {
            await _currentRequestTokenSource.CancelAsync();
        }

        _currentRequestTokenSource = new CancellationTokenSource();

        try
        {
            await Task.Delay(DEBOUNCE_INTERVAL, _currentRequestTokenSource.Token);

            _isLoading = true;
            StateHasChanged();

            var result = await ItemsProviderDelegate.Invoke(request);
            _isLoading = false;
            StateHasChanged();
            return result;
        }
        catch (OperationCanceledException)
        {
            return _emptyResult;
        }
    }

    private async Task OnClearButtonClick()
    {
        if (await JsInteropService.IsMobileAsync())
        {
            await _nameSearchField.BlurAsync();
        }

        await OnSearch.InvokeAsync();
    }

    private async Task OnContributionPromptClick()
    {
        _shouldShowContributionPrompt = false;

        await LocalStorageService.SetItemAsync(CONTRIBUTION_PROMPT_CLICKED_KEY, true);

        NavigationManager.NavigateTo(FogUrlBuilder.PageRoutes.HELP_STATS_HUB_PATH);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }

        _shouldShowContributionPrompt = !await LocalStorageService.GetItemAsync<bool>(CONTRIBUTION_PROMPT_CLICKED_KEY);
    }

    public async ValueTask DisposeAsync()
    {
        _currentRequestTokenSource?.Dispose();
    }

}