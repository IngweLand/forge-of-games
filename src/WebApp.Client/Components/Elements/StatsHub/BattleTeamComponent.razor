@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Battle
@using Ingweland.Fog.Application.Core.Helpers
@using Ingweland.Fog.Models.Hoh.Enums
@using Microsoft.Extensions.Localization
@using MudBlazor.Utilities
@inject IStringLocalizer<FogResource> Loc
@inject IAssetUrlProvider AssetUrlProvider

<div class="fog-container component-root user-select-none">
    <div class="@StatusContainerClassname">
        <div class="top-items top-left-items">
            @if (Data.StatsId.HasValue)
            {
                <img class="stats-button" src="@AssetUrlProvider.GetHohIconUrl("icon_hud_battlestats")"
                     @onclick="@(() => OnBattleStatsClicked.InvokeAsync(Data))"/>
            }
        </div>
        <span>
            @switch (Data.ResultStatus)
            {
                case BattleResultStatus.Win:
                    @Loc[FogResource.Common_Victory]
                    break;
                case BattleResultStatus.Defeat:
                    @Loc[FogResource.Common_Defeat]
                    break;
            }
        </span>
        <div class="top-items top-right-items">
            @if (ShowNavigateToBattleButton)
            {
                <MudIconButton Icon="@Icons.Material.Outlined.Info" Color="Color.Inherit"
                               Href="@(NavigationManager.ToAbsoluteUri(FogUrlBuilder.PageRoutes.Battle(Data.Id)).ToString())"/>
            }
            <MudIconButton Icon="@Icons.Material.Outlined.IosShare" Color="Color.Inherit" OnClick="@ShareLink"/>
        </div>

    </div>
    <div class="@TeamsClassname">
        <div class="squads-row">
            @foreach (var unit in Data.PlayerSquads)
            {
                <BattleSquadComponent ShowResultState="@(Data.BattleType != BattleType.HistoricBattle)"
                                      OnClick="@OnHeroClicked" BattleSquad="unit"/>
            }
        </div>
        @if (Data.EnemySquads.Count > 0)
        {
            <span class="versus-label">vs</span>
            <div class="squads-row">
                @foreach (var unit in Data.EnemySquads)
                {
                    <BattleSquadComponent OnClick="@OnHeroClicked" BattleSquad="unit"/>
                }
            </div>
        }
    </div>
    <span class="date-label">@Data.PerformedAt</span>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public BattleSummaryViewModel Data { get; set; }

    [Parameter]
    public EventCallback<BattleSummaryViewModel> OnBattleStatsClicked { get; set; }

    [Parameter]
    public EventCallback<BattleSquadViewModel> OnHeroClicked { get; set; }

    private string StatusContainerClassname => new CssBuilder("header-row")
        .AddClass("victory", Data.ResultStatus == BattleResultStatus.Win)
        .AddClass("defeat", Data.ResultStatus == BattleResultStatus.Defeat)
        .Build();

    private string TeamsClassname => new CssBuilder("content-row")
        .AddClass("content-row-two-teams", Data.EnemySquads.Count > 0)
        .Build();

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public bool ShowNavigateToBattleButton { get; set; } = true;

    private async Task ShareLink()
    {
        var options = GetDefaultDialogOptions();
        var parameters = new DialogParameters<ShareBattleLinkDialog>
        {
            {x => x.BattleId, Data.Id},
            {x => x.BattleDefinitionId, Data.BattleDefinitionId},
            {x => x.BattleType, Data.BattleType},
            {x => x.Difficulty, Data.Difficulty},
        };
        await DialogService.ShowAsync<ShareBattleLinkDialog>(Loc[FogResource.Common_Share],
            parameters, options);
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private static DialogOptions GetDefaultDialogOptions()
    {
        return new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackgroundClass = "dialog-blur-bg",
            Position = DialogPosition.TopCenter,
            CloseButton = true,
            CloseOnEscapeKey = true,
            NoHeader = true,
        };
    }

}