@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.StatsHub.ViewModels
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Battle
@using Ingweland.Fog.Dtos.Hoh.Battle
@using Ingweland.Fog.Models.Hoh.Enums
@using Ingweland.Fog.WebApp.Client.Components.Elements.CommandCenter
@using Microsoft.Extensions.Localization
@using Syncfusion.Blazor.Data
@inject IStringLocalizer<FogResource> Loc
@inject IAssetUrlProvider AssetUrlProvider
@inject IDialogService DialogService

<div class="component-root">
    @if (ViewModel != null)
    {
        <div class="options-container">
            <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_BattleType]"
                       Value="@SearchRequest.BattleType"
                       T="BattleType" Strict="true" ToStringFunc="@(bt => ViewModel.BattleTypes[bt])"
                       ValueChanged="BattleTypeOnChange" Variant="Variant.Outlined">
                @foreach (var bt in ViewModel.BattleTypes)
                {
                    <MudSelectItem Value="@bt.Key">@bt.Value</MudSelectItem>
                }
            </MudSelect>
            @if (SearchRequest.BattleType == BattleType.Campaign)
            {
                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Difficulty]"
                           Value="@SearchRequest.Difficulty"
                           T="Difficulty" Strict="true" ToStringFunc="@(src => ViewModel.Difficulties[src])"
                           ValueChanged="DifficultyOnChange" Variant="Variant.Outlined">
                    @foreach (var difficulty in ViewModel.Difficulties)
                    {
                        <MudSelectItem Value="@difficulty.Key">@difficulty.Value</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_CampaignRegion]"
                           Value="@_selectedCampaignRegion"
                           T="RegionBasicViewModel" Strict="true"
                           ValueChanged="CampaignRegionOnChange" Variant="Variant.Outlined">
                    @foreach (var continent in ViewModel.CampaignContinents)
                    {
                        <MudSelectItem T="RegionBasicViewModel"
                                       Disabled="true"
                                       Style="background-color: var(--fog-container-color); color: var(--fog-text-on-dark-color) !important;">
                            @continent.Name
                        </MudSelectItem>
                        @foreach (var region in continent.Regions)
                        {
                            <MudSelectItem Value="@region">@region.Name</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudSelect Margin="Margin.Dense" Dense="true"
                           Label="@Loc[FogResource.BattleSelector_Encounter]"
                           Value="@SearchRequest.CampaignRegionEncounter"
                           T="int" Strict="true"
                           ValueChanged="CampaignRegionEncounterOnChange" Variant="Variant.Outlined">
                    @foreach (var encounter in ViewModel.CampaignRegionEncounters)
                    {
                        <MudSelectItem Value="@encounter">@encounter</MudSelectItem>
                    }
                </MudSelect>
            }
            else if (SearchRequest.BattleType == BattleType.TreasureHunt)
            {
                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Difficulty]"
                           Value="@SearchRequest.TreasureHuntDifficulty"
                           T="int" Strict="true"
                           ValueChanged="TreasureHuntDifficultyOnChange" Variant="Variant.Outlined">
                    @foreach (var difficulty in ViewModel.TreasureHuntDifficulties)
                    {
                        <MudSelectItem Value="@difficulty.Difficulty">@difficulty.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_TreasureHuntStage]"
                           Value="@SearchRequest.TreasureHuntStage"
                           T="int" Strict="true"
                           ValueChanged="TreasureHuntStageOnChange" Variant="Variant.Outlined">
                    @foreach (var stage in ViewModel.TreasureHuntDifficulties.FirstOrDefault(src => src.Difficulty == SearchRequest.TreasureHuntDifficulty)?.Stages ?? [])
                    {
                        <MudSelectItem Value="@stage.Index">@stage.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Encounter]"
                           Value="@SearchRequest.TreasureHuntEncounter"
                           T="int" Strict="true"
                           ValueChanged="TreasureHuntEncounterOnChange" Variant="Variant.Outlined">
                    @foreach (var encounter in ViewModel.TreasureHuntEncounters)
                    {
                        <MudSelectItem Value="@encounter">@(encounter + 1)</MudSelectItem>
                    }
                </MudSelect>
            }
            else if (SearchRequest.BattleType == BattleType.HistoricBattle)
            {
                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Battle]"
                           Value="@_selectedHistoricBattleRegion"
                           T="RegionBasicViewModel" Strict="true"
                           ValueChanged="HistoricBattleRegionOnChange" Variant="Variant.Outlined">
                    @foreach (var region in ViewModel.HistoricBattleRegions)
                    {
                        <MudSelectItem Value="@region">@region.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Encounter]"
                           Value="@SearchRequest.HistoricBattleEncounter"
                           T="int" Strict="true"
                           ValueChanged="HistoricBattleEncounterOnChange" Variant="Variant.Outlined">
                    @foreach (var encounter in ViewModel.HistoricBattleEncounters)
                    {
                        <MudSelectItem Value="@encounter">@encounter</MudSelectItem>
                    }
                </MudSelect>
            }
            else if (SearchRequest.BattleType == BattleType.TeslaStorm)
            {
                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Battle]"
                           Value="@_selectedTeslaStormRegion"
                           T="RegionBasicViewModel" Strict="true"
                           ValueChanged="TeslaRegionOnChange" Variant="Variant.Outlined">
                    @foreach (var region in ViewModel.TeslaStormRegions)
                    {
                        <MudSelectItem Value="@region">@region.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Encounter]"
                           Value="@SearchRequest.TeslaStormEncounter"
                           T="int" Strict="true"
                           ValueChanged="TeslaStormEncounterOnChange" Variant="Variant.Outlined">
                    @foreach (var encounter in ViewModel.TeslaStormEncounters)
                    {
                        <MudSelectItem Value="@encounter">@encounter</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudSelect Margin="Margin.Dense" Dense="true" Label="@Loc[FogResource.BattleSelector_Result]"
                       Value="@SearchRequest.ResultStatus"
                       T="BattleResultStatus" Strict="true" ToStringFunc="@BattleResultStatusToStringFunc"
                       ValueChanged="ResultStatusOnChange" Variant="Variant.Outlined">
                <MudSelectItem Value="@BattleResultStatus.Undefined"/>
                <MudSelectItem Value="@BattleResultStatus.Win"/>
                <MudSelectItem Value="@BattleResultStatus.Defeat"/>
            </MudSelect>
        </div>

        <div class="units-container">
            @foreach (var unit in SearchRequest.UnitIds)
            {
                <img class="hero-avatar" src="@ViewModel.Heroes.FirstOrDefault(src => src.UnitId == unit)?.PortraitUrl"
                     @onclick="@(() => RemoveHero(unit))"/>
            }
            @if (SearchRequest.UnitIds.Count < MaxUnitCount)
            {
                <img class="hero-avatar" src="@AssetUrlProvider.GetHohUnitPortraitUrl("Unit_Unknown")"
                     @onclick="AddHero"/>
            }

        </div>
    }

</div>

<style>
    /*mudblazor overrides*/
    .mud-select .mud-select-input {
        font-size: 12px !important;
        font-weight: 500 !important;
    }
</style>

@code {

    private const int MaxUnitCount = 5;
    private RegionBasicViewModel? _selectedCampaignRegion;
    private RegionBasicViewModel? _selectedHistoricBattleRegion;
    private RegionBasicViewModel? _selectedTeslaStormRegion;

    [Parameter]
    public required BattleSearchRequest SearchRequest { get; set; }

    [Parameter]
    public BattleSelectorViewModel? ViewModel
    {
        get => _viewModel;
        set
        {
            if (_viewModel == value)
            {
                return;
            }

            _viewModel = value;

            _regionViewModels = _viewModel?.CampaignContinents
                .SelectMany(src => src.Regions)
                .ToDictionary(src => src.Id) ?? [];

            _historicBattleRegionViewModels = _viewModel?.HistoricBattleRegions
                .ToDictionary(src => src.Id) ?? [];
            _teslaStormRegionViewModels = _viewModel?.TeslaStormRegions
                .ToDictionary(src => src.Id) ?? [];
        }
    }

    [Parameter]
    public EventCallback<BattleSearchRequest> SearchRequestChanged { get; set; }

    private Dictionary<RegionId, RegionBasicViewModel> _regionViewModels = [];
    private Dictionary<RegionId, RegionBasicViewModel> _historicBattleRegionViewModels = [];
    private Dictionary<RegionId, RegionBasicViewModel> _teslaStormRegionViewModels = [];
    private BattleSelectorViewModel? _viewModel;

    protected override void OnParametersSet()
    {
        if (ViewModel == null)
        {
            return;
        }

        if (!_regionViewModels.TryGetValue(SearchRequest.CampaignRegion, out _selectedCampaignRegion))
        {
            _selectedCampaignRegion = ViewModel.CampaignContinents.First().Regions.First();
        }

        if (!_historicBattleRegionViewModels.TryGetValue(SearchRequest.HistoricBattleRegion, out _selectedHistoricBattleRegion))
        {
            _selectedHistoricBattleRegion = ViewModel.HistoricBattleRegions.First();
        }

        if (!_teslaStormRegionViewModels.TryGetValue(SearchRequest.TeslaStormRegion, out _selectedTeslaStormRegion))
        {
            _selectedTeslaStormRegion = ViewModel.TeslaStormRegions.First();
        }
    }

    private string BattleResultStatusToStringFunc(BattleResultStatus status)
    {
        return status switch
        {
            BattleResultStatus.Defeat => Loc[FogResource.Common_Defeat],
            BattleResultStatus.Win => Loc[FogResource.Common_Victory],
            _ => Loc[FogResource.Common_All],
        };
    }

    private Task BattleTypeOnChange(BattleType newValue)
    {
        return SearchRequest.BattleType == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {BattleType = newValue});
    }

    private Task DifficultyOnChange(Difficulty newValue)
    {
        return SearchRequest.Difficulty == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {Difficulty = newValue});
    }

    private Task CampaignRegionOnChange(RegionBasicViewModel newValue)
    {
        return SearchRequest.CampaignRegion == newValue.Id
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {CampaignRegion = newValue.Id});
    }

    private Task HistoricBattleRegionOnChange(RegionBasicViewModel newValue)
    {
        return SearchRequest.HistoricBattleRegion == newValue.Id
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {HistoricBattleRegion = newValue.Id});
    }

    private Task TeslaRegionOnChange(RegionBasicViewModel newValue)
    {
        return SearchRequest.TeslaStormRegion == newValue.Id
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {TeslaStormRegion = newValue.Id});
    }

    private Task CampaignRegionEncounterOnChange(int newValue)
    {
        return SearchRequest.CampaignRegionEncounter == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {CampaignRegionEncounter = newValue});
    }

    private Task TreasureHuntDifficultyOnChange(int newValue)
    {
        return SearchRequest.TreasureHuntDifficulty == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {TreasureHuntDifficulty = newValue});
    }

    private Task TreasureHuntStageOnChange(int newValue)
    {
        return SearchRequest.TreasureHuntStage == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {TreasureHuntStage = newValue});
    }

    private Task TreasureHuntEncounterOnChange(int newValue)
    {
        return SearchRequest.TreasureHuntEncounter == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {TreasureHuntEncounter = newValue});
    }

    private Task HistoricBattleEncounterOnChange(int newValue)
    {
        return SearchRequest.HistoricBattleEncounter == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {HistoricBattleEncounter = newValue});
    }

    private Task TeslaStormEncounterOnChange(int newValue)
    {
        return SearchRequest.TeslaStormEncounter == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {TeslaStormEncounter = newValue});
    }

    private Task ResultStatusOnChange(BattleResultStatus newValue)
    {
        return SearchRequest.ResultStatus == newValue
            ? Task.CompletedTask
            : SearchRequestChanged.InvokeAsync(SearchRequest with {ResultStatus = newValue});
    }

    private async Task AddHero()
    {
        var options = GetDefaultDialogOptions();

        var parameters = new DialogParameters<CcAddHeroDialog> {{d => d.Heroes, ViewModel!.Heroes}};
        var dialog = await DialogService.ShowAsync<CcAddHeroDialog>(null, parameters, options);
        var result = await dialog.Result;
        if (result == null || result.Canceled)
        {
            return;
        }

        var heroId = result.Data as string;
        if (string.IsNullOrWhiteSpace(heroId))
        {
            return;
        }

        var unitId = ViewModel.Heroes.First(src => src.Id == heroId).UnitId;
        var l = SearchRequest.UnitIds.ToList();
        l.Add(unitId);
        await SearchRequestChanged.InvokeAsync(SearchRequest with {UnitIds = l});
    }

    private static DialogOptions GetDefaultDialogOptions()
    {
        return new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackgroundClass = "dialog-blur-bg",
            Position = DialogPosition.TopCenter,
        };
    }

    private Task RemoveHero(string unitId)
    {
        var index = SearchRequest.UnitIds.IndexOf(unitId);
        if (index == -1)
        {
            return Task.CompletedTask;
        }

        var l = SearchRequest.UnitIds.ToList();
        l.RemoveAt(index);
        return SearchRequestChanged.InvokeAsync(SearchRequest with {UnitIds = l});
    }

}