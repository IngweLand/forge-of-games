@using Ingweland.Fog.Application.Client.Web.CityPlanner.Abstractions
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Services.Abstractions
@using Ingweland.Fog.WebApp.Client.Services.Abstractions
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<FogResource> Loc
@inject IPersistenceService PersistenceService
@inject ICityPlannerSharingService CitysPlannerSharingService
@inject IJSInteropService JSInteropService
<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <DialogContent>
        @if (_isLoading)
        {
            <LoadingIndicator Dense="true"/>
        }
        else if (_link != null)
        {
            <div class="share-link-container">
                <span>@_link</span>
                <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="CopyLink"/>
            </div>
        }
        else
        {
            <MudButton Color="Color.Primary" Variant="Variant.Filled"
                       OnClick="Share">@Loc[FogResource.ShareDialog_ShareButton]</MudButton>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">@Loc[FogResource.Common_Close]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required string CityId { get; set; }

    private bool _isLoading;

    private string? _link;

    private void Close()
    {
        MudDialog.Cancel();
    }

    private async Task Share()
    {
        try
        {
            _isLoading = true;
            var city = await PersistenceService.LoadCity(CityId);
            if (city != null)
            {
                var sharingResult = await CitysPlannerSharingService.ShareAsync(city);

                _link = sharingResult.WebResourceUrl;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CopyLink()
    {
        if (string.IsNullOrWhiteSpace(_link))
        {
            return;
        }

        await JSInteropService.CopyToClipboardAsync(_link);
    }

}