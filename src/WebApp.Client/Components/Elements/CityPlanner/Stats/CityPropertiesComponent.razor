@rendermode InteractiveWebAssembly
@using Ingweland.Fog.Application.Client.Web.CityPlanner.Abstractions
@using Ingweland.Fog.Application.Client.Web.CityPlanner.Stats
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.Models
@using Ingweland.Fog.Dtos.Hoh.City
@using Ingweland.Fog.Models.Hoh.Enums
@using Microsoft.Extensions.Localization
@implements IDisposable
@inject ICityPlanner CityPlanner
@inject IStringLocalizer<FogResource> Loc
<div class="fog-container component-root">
    <div class="age-label" style="background-color: @Data.Age.Color">@Data.Age.Name</div>
    <div class="header-container">@Data.Name</div>
    <div class="main-container">
        @if (Data.WonderName != null)
        {
            <div class="wonder-level-selector-container">
                <span class="entity-title">@Data.WonderName</span>
                @if (Editable)
                {
                    <BuildingLevelSelectorComponent Levels="@_wonderLevelRange" LevelChanged="OnWonderLevelChanged"
                                                    SelectedLevel="@Data.WonderLevel"/>
                }
                else
                {
                    @($"{Loc[FogResource.Hoh_Lvl]} {Data.WonderLevel}") 
                }
            </div>
        }
        <CityProductionStatsComponent Data="@Data.Production"/>
        @if (Data.CityId is (CityId.Capital or CityId.Mayas_Tikal or CityId.Mayas_ChichenItza or CityId.Mayas_SayilPalace))
        {
            <HappinessStatsComponent Data="@Data.Happiness"/>
        }
        <CityAreaStatsComponent Data="@Data.Areas"/>
        <WorkforceStatsComponent Data="@Data.Workforce"/>
    </div>
</div>

@code {

    private readonly BuildingLevelRange _wonderLevelRange = new() {StartLevel = 0, EndLevel = 50};

    protected override void OnInitialized()
    {
        CityPlanner.StateHasChanged += CityPlannerOnStateChanged;
    }

    private void CityPlannerOnStateChanged()
    {
        StateHasChanged();
    }

    [Parameter]
    public bool Editable { get; set; } = true;
    
    [Parameter]
    public CityPlannerCityPropertiesViewModel Data { get; set; } = null!;

    private void OnProductClicked(string productId)
    {
        CityPlanner.UpdateProduct(productId);
    }

    public void Dispose()
    {
        CityPlanner.StateHasChanged -= CityPlannerOnStateChanged;
    }

    private void OnWonderLevelChanged(int level)
    {
        CityPlanner.UpdateWonderLevel(level);
    }

}