@using System.Globalization
@using Ingweland.Fog.Application.Client.Web.Localization
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.City
@using Ingweland.Fog.Models.Fog.Entities
@if (_profile != null)
{
    <div class="component-root">
        <div class="header-container">
            <div class="fog-container avatar-section" @onclick="ToggleAvatarSource">
                <div class="avatar-container">
                    @if (_showVideoAvatar)
                    {
                        <video autoplay loop muted playsinline @onerror="OnVideoError">
                            <source src="@_profile.VideoUrl" type="video/mp4" @onerror="OnVideoError">
                            Your browser does not support the video tag.
                        </video>
                        <div class="hover-icon">
                            <span class="material-symbols-outlined material-icons">photo_camera</span>
                        </div>
                    }
                    else
                    {
                        <img src="@_profile.PortraitUrl"/>
                        <div class="hover-icon">
                            <span class="material-symbols-outlined material-icons">videocam</span>
                        </div>
                    }

                    <div class="rating">@(new string('â˜…', _profile.StarCount))</div>
                </div>
                <div class="power-label">@_profile.TotalPower</div>
            </div>
            <div class="fog-container header-content">
                <div class="hero-name">@_profile.Name</div>
                <div class="hero-icons-section">
                    <div class="hero-icons-section-item-container">
                        <div class="hero-icons-section-item">
                            <img src="@_profile.UnitClassTintedIconUrl" class="hero-icons-section-icon"/>
                            <span class="hero-icons-section-label">@_profile.UnitClassName</span>
                        </div>
                    </div>
                    <div class="divider"></div>
                    <div class="hero-icons-section-item-container">
                        <div class="hero-icons-section-item">
                            <img src="@_profile.UnitTypeTintedIconUrl" class="hero-icons-section-icon"/>
                            <span class="hero-icons-section-label">@_profile.UnitTypeName</span>
                        </div>
                    </div>
                </div>
                <div class="hero-stats-section">
                    @foreach (var statItem in _profile.StatsItems)
                    {
                        <HeroStatsItemComponent StatItem="@statItem"/>
                    }
                </div>
            </div>
        </div>

        <div class="fog-container section-container options-container">
            <div class="selector-component">
                <MudSelect Dense="true" Label="@Loc[FogResource.Hoh_Hero_Main]" ToStringFunc="@(l => l?.Title)"
                           Value="@_profile.Level" T="HeroLevelSpecs"
                           ValueChanged="OnLevelValueChanged" Variant="Variant.Outlined">
                    @foreach (var level in _profile.HeroLevels)
                    {
                        <MudSelectItem Value="level">@level.Title</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="selector-component">
                <MudSelect Dense="true" Label="@Loc[FogResource.Hoh_Hero_Ability]" T="int"
                           Value="@_profile.Identifier.AbilityLevel"
                           ValueChanged="OnAbilityLevelValueChanged" Variant="Variant.Outlined">
                    @foreach (var level in _profile.AbilityLevels)
                    {
                        <MudSelectItem Value="level">@level</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="selector-component">
                <MudSelect Dense="true" Label="@Loc[FogResource.Hoh_Hero_Awakening]" T="int"
                           Value="@_profile.Identifier.AwakeningLevel"
                           ValueChanged="OnAwakeningValueChanged"
                           Variant="Variant.Outlined">
                    @foreach (var level in _profile.AwakeningLevels)
                    {
                        <MudSelectItem Value="level">@level</MudSelectItem>
                    }
                </MudSelect>
            </div>
            @if (ShowBarracksSelector)
            {
                <div class="selector-component">
                    <MudSelect Dense="true" Label="@Loc[FogResource.Hoh_Hero_Barracks]"
                               ValueChanged="OnBarracksLevelChanged"
                               T="BuildingLevelSpecs" RelativeWidth="DropdownWidth.Adaptive"
                               ToStringFunc="@(x => x?.Level.ToString(CultureInfo.InvariantCulture) ?? string.Empty)"
                               Value="@(_profile.BarracksLevels.FirstOrDefault(x => x.Level == _profile.Identifier.BarracksLevel))"
                               Variant="Variant.Outlined">
                        @foreach (var level in _profile.BarracksLevels)
                        {
                            <BuildingLevelSelectItemComponent Dense="true" LevelSpecs="level"/>
                        }
                    </MudSelect>
                </div>
            }
        </div>

        <div class="ability-container section-container fog-container">
            <HeroAbilityComponent Ability="@_profile.Ability"/>
        </div>


        <div class="progression-cost-container section-container fog-container">
            <span
                class="progression-cost-title">@Loc[FogResource.Tools_HeroProgressionResourcesCalculator_Name]</span>
            @if (_progressionTargetLevels != null)
            {
                <div class="selector-component">
                    <MudSelect Label="@Loc[FogResource.Tools_TargetLevel]" T="HeroLevelSpecs"
                               ValueChanged="OnProgressionTargetLevelChanged" Value="@_progressionTargetLevel"
                               ToStringFunc="@(l => l?.Title)"
                               Variant="Variant.Outlined">

                        @foreach (var level in _progressionTargetLevels)
                        {
                            <MudSelectItem Value="level">@level.Title</MudSelectItem>
                        }
                    </MudSelect>
                </div>

                @if (_progressionCost != null)
                {
                    <div class="progression-cost-items-container">
                        @foreach (var cost in _progressionCost)
                        {
                            <HorizontalIconLabelComponent Item="cost"/>
                        }
                    </div>
                }
            }
        </div>

        <div class="progression-cost-container section-container fog-container">
            <span
                class="progression-cost-title">@Loc[FogResource.Tools_AbilityCostCalculator_Name]</span>
            <AbilityCostCalculatorComponent HeroId="@_profile.Identifier.HeroId" Levels="@_profile.AbilityLevels"
                                            CurrentLevel="@_profile.Identifier.AbilityLevel"
                                            OnTargetLevelChanged="OnAbilityCalculatorTargetLevelChanged"/>
        </div>


        @if (_profile.SupportUnit != null)
        {
            <div class="support-unit-container section-container fog-container">
                <img src="@_profile.SupportUnit.IconUrl"/>
                @foreach (var statItem in _profile.SupportUnit.StatsItems)
                {
                    <HeroStatsItemComponent StatItem="@statItem"/>
                }
            </div>
        }

        <UnitBattlesComponent UnitId="@_profile.HeroUnitId" AdditionalAnalyticsParams="_defaultAnalyticsParameters"/>

        <WikiAbstractComponent SearchString="@_profile.Name"/>

    </div>
}
<style>
    .mud-input > div.mud-input-root {
        display: inline-flex !important;
        align-items: center;
        justify-content: flex-start;
    }
</style>
