@using Ingweland.Fog.Application.Client.Web.Providers.Interfaces
@using Ingweland.Fog.Application.Client.Web.ViewModels.Hoh.Battle
@using Ingweland.Fog.Models.Hoh.Enums
@inject IAssetUrlProvider AssetUrlProvider;
@inject ICampaignDifficultyIconUrlProvider CampaignDifficultyIconUrlProvider
<div class="d-flex flex-column w-100 gap-2 p-3 fog-container mb-3">
    <div class="d-flex align-items-start">
        <div class="position-relative d-inline-block" style="height: 115px;">
            <img alt="Encounter" class="h-100 object-fit-contain"
                 src="@AssetUrlProvider.GetHohImageUrl("common_map_encounter")">
            <span class="encounter-number user-select-none">
                @Encounter.Title
            </span>
        </div>

        <div class="d-flex align-items-start flex-wrap gap-3 gap-sm-4">
            @foreach (var url in _encounterDetails.RequiredHeroClassIconUrls)
            {
                <IconWithBorder IconUrl="@url"/>
            }
            @foreach (var url in _encounterDetails.RequiredHeroTypeIconUrls)
            {
                <IconWithBorder IconUrl="@url"/>
            }
            <ResourceWithValue ResourceValue="@_encounterDetails.AvailableHeroSlots"/>
            @foreach (var reward in _encounterDetails.FirstTimeComletionBonus)
            {
                <EncounterFirstTimeCompletionBonusComponent Reward="@reward"/>
            }
            @foreach (var reward in _encounterDetails.Rewards)
            {
                <EncounterRewardComponent Reward="@reward"/>
            }
        </div>
    </div>
    @foreach (var wave in _encounterDetails.Waves)
    {
        <div class="title-container">
            <span class="title">
                @wave.Title
            </span>
            @if (_difficultyIcon != null)
            {
                <img class="difficulty-icon" src="@_difficultyIcon"/>
            }
            <div class="power-container">
                <img class="power-icon" src="@AssetUrlProvider.GetHohIconUrl("icon_hero_power")"/>
                <span class="power-label">
                @wave.Power
            </span>
            </div>
        </div>
        <div class="row g-2 m-0 mb-2">
            @foreach (var squad in IsExpanded ? wave.Squads : wave.AggregatedSquads)
            {
                <div class="col-12 col-lg-6 col-xxl-4">
                    <CampaignSquadComponent Squad="@squad"></CampaignSquadComponent>
                </div>
            }
        </div>
    }
</div>

@code {

    private EncounterDetailsViewModel _encounterDetails;
    private string? _difficultyIcon;

    [Parameter]
    public EncounterViewModel Encounter { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public Difficulty Difficulty { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateDifficultyState();
    }

    private void UpdateDifficultyState()
    {
        if (Difficulty == Difficulty.Hard)
        {
            _encounterDetails = Encounter.Details[Difficulty.Hard];
            _difficultyIcon = CampaignDifficultyIconUrlProvider.GetIconUrl(Difficulty);
        }
        else
        {
            _encounterDetails = Encounter.Details[Difficulty.Normal];
            _difficultyIcon = null;
        }
    }

}